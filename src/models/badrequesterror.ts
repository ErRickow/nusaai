/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Detail kesalahan request
 */
export type BadRequestErrorDetails = {};

export type BadRequestErrorError = {
  message: string;
  type: string;
  code: string;
  /**
   * Detail kesalahan request
   */
  details?: BadRequestErrorDetails | undefined;
};

/** @internal */
export const BadRequestErrorDetails$inboundSchema: z.ZodType<
  BadRequestErrorDetails,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type BadRequestErrorDetails$Outbound = {};

/** @internal */
export const BadRequestErrorDetails$outboundSchema: z.ZodType<
  BadRequestErrorDetails$Outbound,
  z.ZodTypeDef,
  BadRequestErrorDetails
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestErrorDetails$ {
  /** @deprecated use `BadRequestErrorDetails$inboundSchema` instead. */
  export const inboundSchema = BadRequestErrorDetails$inboundSchema;
  /** @deprecated use `BadRequestErrorDetails$outboundSchema` instead. */
  export const outboundSchema = BadRequestErrorDetails$outboundSchema;
  /** @deprecated use `BadRequestErrorDetails$Outbound` instead. */
  export type Outbound = BadRequestErrorDetails$Outbound;
}

export function badRequestErrorDetailsToJSON(
  badRequestErrorDetails: BadRequestErrorDetails,
): string {
  return JSON.stringify(
    BadRequestErrorDetails$outboundSchema.parse(badRequestErrorDetails),
  );
}

export function badRequestErrorDetailsFromJSON(
  jsonString: string,
): SafeParseResult<BadRequestErrorDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BadRequestErrorDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BadRequestErrorDetails' from JSON`,
  );
}

/** @internal */
export const BadRequestErrorError$inboundSchema: z.ZodType<
  BadRequestErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  type: z.string(),
  code: z.string(),
  details: z.lazy(() => BadRequestErrorDetails$inboundSchema).optional(),
});

/** @internal */
export type BadRequestErrorError$Outbound = {
  message: string;
  type: string;
  code: string;
  details?: BadRequestErrorDetails$Outbound | undefined;
};

/** @internal */
export const BadRequestErrorError$outboundSchema: z.ZodType<
  BadRequestErrorError$Outbound,
  z.ZodTypeDef,
  BadRequestErrorError
> = z.object({
  message: z.string(),
  type: z.string(),
  code: z.string(),
  details: z.lazy(() => BadRequestErrorDetails$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestErrorError$ {
  /** @deprecated use `BadRequestErrorError$inboundSchema` instead. */
  export const inboundSchema = BadRequestErrorError$inboundSchema;
  /** @deprecated use `BadRequestErrorError$outboundSchema` instead. */
  export const outboundSchema = BadRequestErrorError$outboundSchema;
  /** @deprecated use `BadRequestErrorError$Outbound` instead. */
  export type Outbound = BadRequestErrorError$Outbound;
}

export function badRequestErrorErrorToJSON(
  badRequestErrorError: BadRequestErrorError,
): string {
  return JSON.stringify(
    BadRequestErrorError$outboundSchema.parse(badRequestErrorError),
  );
}

export function badRequestErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<BadRequestErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BadRequestErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BadRequestErrorError' from JSON`,
  );
}
