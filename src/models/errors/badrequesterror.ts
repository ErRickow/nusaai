/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { NeosantaraError } from "./neosantaraerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const Code = {
  InvalidParameter: "invalid_parameter",
  MissingParameter: "missing_parameter",
  InvalidFormat: "invalid_format",
  InvalidMessages: "invalid_messages",
} as const;
export type Code = ClosedEnum<typeof Code>;

export type ErrorT = {
  message: string;
  type: string;
  code: Code;
  param?: string | null | undefined;
  details?: { [k: string]: any } | null | undefined;
};

/**
 * Bad request
 */
export type BadRequestErrorData = {
  error?: ErrorT | undefined;
  infoMetadata?: components.Metadata | undefined;
};

/**
 * Bad request
 */
export class BadRequestError extends NeosantaraError {
  error?: ErrorT | undefined;
  infoMetadata?: components.Metadata | undefined;

  /** The original data that was passed to this error instance. */
  data$: BadRequestErrorData;

  constructor(
    err: BadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.error?.message
      || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.error != null) this.error = err.error;
    if (err.infoMetadata != null) this.infoMetadata = err.infoMetadata;

    this.name = "BadRequestError";
  }
}

/** @internal */
export const Code$inboundSchema: z.ZodNativeEnum<typeof Code> = z.nativeEnum(
  Code,
);

/** @internal */
export const Code$outboundSchema: z.ZodNativeEnum<typeof Code> =
  Code$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Code$ {
  /** @deprecated use `Code$inboundSchema` instead. */
  export const inboundSchema = Code$inboundSchema;
  /** @deprecated use `Code$outboundSchema` instead. */
  export const outboundSchema = Code$outboundSchema;
}

/** @internal */
export const ErrorT$inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown> = z
  .object({
    message: z.string(),
    type: z.string(),
    code: Code$inboundSchema,
    param: z.nullable(z.string()).optional(),
    details: z.nullable(z.record(z.any())).optional(),
  });

/** @internal */
export type ErrorT$Outbound = {
  message: string;
  type: string;
  code: string;
  param?: string | null | undefined;
  details?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const ErrorT$outboundSchema: z.ZodType<
  ErrorT$Outbound,
  z.ZodTypeDef,
  ErrorT
> = z.object({
  message: z.string(),
  type: z.string(),
  code: Code$outboundSchema,
  param: z.nullable(z.string()).optional(),
  details: z.nullable(z.record(z.any())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorT$ {
  /** @deprecated use `ErrorT$inboundSchema` instead. */
  export const inboundSchema = ErrorT$inboundSchema;
  /** @deprecated use `ErrorT$outboundSchema` instead. */
  export const outboundSchema = ErrorT$outboundSchema;
  /** @deprecated use `ErrorT$Outbound` instead. */
  export type Outbound = ErrorT$Outbound;
}

export function errorToJSON(errorT: ErrorT): string {
  return JSON.stringify(ErrorT$outboundSchema.parse(errorT));
}

export function errorFromJSON(
  jsonString: string,
): SafeParseResult<ErrorT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorT' from JSON`,
  );
}

/** @internal */
export const BadRequestError$inboundSchema: z.ZodType<
  BadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => ErrorT$inboundSchema).optional(),
  info_metadata: components.Metadata$inboundSchema.optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "info_metadata": "infoMetadata",
    });

    return new BadRequestError(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type BadRequestError$Outbound = {
  error?: ErrorT$Outbound | undefined;
  info_metadata?: components.Metadata$Outbound | undefined;
};

/** @internal */
export const BadRequestError$outboundSchema: z.ZodType<
  BadRequestError$Outbound,
  z.ZodTypeDef,
  BadRequestError
> = z.instanceof(BadRequestError)
  .transform(v => v.data$)
  .pipe(
    z.object({
      error: z.lazy(() => ErrorT$outboundSchema).optional(),
      infoMetadata: components.Metadata$outboundSchema.optional(),
    }).transform((v) => {
      return remap$(v, {
        infoMetadata: "info_metadata",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestError$ {
  /** @deprecated use `BadRequestError$inboundSchema` instead. */
  export const inboundSchema = BadRequestError$inboundSchema;
  /** @deprecated use `BadRequestError$outboundSchema` instead. */
  export const outboundSchema = BadRequestError$outboundSchema;
  /** @deprecated use `BadRequestError$Outbound` instead. */
  export type Outbound = BadRequestError$Outbound;
}
