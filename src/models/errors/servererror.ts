/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { NeosantaraError } from "./neosantaraerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type ServerErrorError = {
  message: string;
  type: string;
  code: string;
};

/**
 * Error server internal.
 */
export type ServerErrorData = {
  error?: ServerErrorError | undefined;
  /**
   * Metadata response dari NusantaraAI.
   */
  metadata?: components.Metadata | undefined;
};

/**
 * Error server internal.
 */
export class ServerError extends NeosantaraError {
  error?: ServerErrorError | undefined;
  /**
   * Metadata response dari NusantaraAI.
   */
  metadata?: components.Metadata | undefined;

  /** The original data that was passed to this error instance. */
  data$: ServerErrorData;

  constructor(
    err: ServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.error != null) this.error = err.error;
    if (err.metadata != null) this.metadata = err.metadata;

    this.name = "ServerError";
  }
}

/** @internal */
export const ServerErrorError$inboundSchema: z.ZodType<
  ServerErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  type: z.string(),
  code: z.string(),
});

/** @internal */
export type ServerErrorError$Outbound = {
  message: string;
  type: string;
  code: string;
};

/** @internal */
export const ServerErrorError$outboundSchema: z.ZodType<
  ServerErrorError$Outbound,
  z.ZodTypeDef,
  ServerErrorError
> = z.object({
  message: z.string(),
  type: z.string(),
  code: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerErrorError$ {
  /** @deprecated use `ServerErrorError$inboundSchema` instead. */
  export const inboundSchema = ServerErrorError$inboundSchema;
  /** @deprecated use `ServerErrorError$outboundSchema` instead. */
  export const outboundSchema = ServerErrorError$outboundSchema;
  /** @deprecated use `ServerErrorError$Outbound` instead. */
  export type Outbound = ServerErrorError$Outbound;
}

export function serverErrorErrorToJSON(
  serverErrorError: ServerErrorError,
): string {
  return JSON.stringify(
    ServerErrorError$outboundSchema.parse(serverErrorError),
  );
}

export function serverErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<ServerErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServerErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServerErrorError' from JSON`,
  );
}

/** @internal */
export const ServerError$inboundSchema: z.ZodType<
  ServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => ServerErrorError$inboundSchema).optional(),
  _metadata: components.Metadata$inboundSchema.optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "_metadata": "metadata",
    });

    return new ServerError(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServerError$Outbound = {
  error?: ServerErrorError$Outbound | undefined;
  _metadata?: components.Metadata$Outbound | undefined;
};

/** @internal */
export const ServerError$outboundSchema: z.ZodType<
  ServerError$Outbound,
  z.ZodTypeDef,
  ServerError
> = z.instanceof(ServerError)
  .transform(v => v.data$)
  .pipe(
    z.object({
      error: z.lazy(() => ServerErrorError$outboundSchema).optional(),
      metadata: components.Metadata$outboundSchema.optional(),
    }).transform((v) => {
      return remap$(v, {
        metadata: "_metadata",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerError$ {
  /** @deprecated use `ServerError$inboundSchema` instead. */
  export const inboundSchema = ServerError$inboundSchema;
  /** @deprecated use `ServerError$outboundSchema` instead. */
  export const outboundSchema = ServerError$outboundSchema;
  /** @deprecated use `ServerError$Outbound` instead. */
  export type Outbound = ServerError$Outbound;
}
