/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { NeosantaraError } from "./neosantaraerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Detail informasi rate limit
 */
export type RateLimitErrorDetails = {
  /**
   * Batas maksimal
   */
  limit?: number | undefined;
  /**
   * Sisa kuota
   */
  remaining?: number | undefined;
  /**
   * Waktu reset limit
   */
  reset?: Date | undefined;
  /**
   * Retry setelah berapa detik
   */
  retryAfter?: number | undefined;
};

export type RateLimitErrorError = {
  message: string;
  type: string;
  code: string;
  /**
   * Detail informasi rate limit
   */
  details?: RateLimitErrorDetails | undefined;
};

/**
 * Error jika terkena rate limit.
 */
export type RateLimitErrorData = {
  error?: RateLimitErrorError | undefined;
  /**
   * Metadata response dari NusantaraAI.
   */
  metadata?: components.Metadata | undefined;
};

/**
 * Error jika terkena rate limit.
 */
export class RateLimitError extends NeosantaraError {
  error?: RateLimitErrorError | undefined;
  /**
   * Metadata response dari NusantaraAI.
   */
  metadata?: components.Metadata | undefined;

  /** The original data that was passed to this error instance. */
  data$: RateLimitErrorData;

  constructor(
    err: RateLimitErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.error != null) this.error = err.error;
    if (err.metadata != null) this.metadata = err.metadata;

    this.name = "RateLimitError";
  }
}

/** @internal */
export const RateLimitErrorDetails$inboundSchema: z.ZodType<
  RateLimitErrorDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().optional(),
  remaining: z.number().int().optional(),
  reset: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  retry_after: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "retry_after": "retryAfter",
  });
});

/** @internal */
export type RateLimitErrorDetails$Outbound = {
  limit?: number | undefined;
  remaining?: number | undefined;
  reset?: string | undefined;
  retry_after?: number | undefined;
};

/** @internal */
export const RateLimitErrorDetails$outboundSchema: z.ZodType<
  RateLimitErrorDetails$Outbound,
  z.ZodTypeDef,
  RateLimitErrorDetails
> = z.object({
  limit: z.number().int().optional(),
  remaining: z.number().int().optional(),
  reset: z.date().transform(v => v.toISOString()).optional(),
  retryAfter: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    retryAfter: "retry_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RateLimitErrorDetails$ {
  /** @deprecated use `RateLimitErrorDetails$inboundSchema` instead. */
  export const inboundSchema = RateLimitErrorDetails$inboundSchema;
  /** @deprecated use `RateLimitErrorDetails$outboundSchema` instead. */
  export const outboundSchema = RateLimitErrorDetails$outboundSchema;
  /** @deprecated use `RateLimitErrorDetails$Outbound` instead. */
  export type Outbound = RateLimitErrorDetails$Outbound;
}

export function rateLimitErrorDetailsToJSON(
  rateLimitErrorDetails: RateLimitErrorDetails,
): string {
  return JSON.stringify(
    RateLimitErrorDetails$outboundSchema.parse(rateLimitErrorDetails),
  );
}

export function rateLimitErrorDetailsFromJSON(
  jsonString: string,
): SafeParseResult<RateLimitErrorDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RateLimitErrorDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RateLimitErrorDetails' from JSON`,
  );
}

/** @internal */
export const RateLimitErrorError$inboundSchema: z.ZodType<
  RateLimitErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  type: z.string(),
  code: z.string(),
  details: z.lazy(() => RateLimitErrorDetails$inboundSchema).optional(),
});

/** @internal */
export type RateLimitErrorError$Outbound = {
  message: string;
  type: string;
  code: string;
  details?: RateLimitErrorDetails$Outbound | undefined;
};

/** @internal */
export const RateLimitErrorError$outboundSchema: z.ZodType<
  RateLimitErrorError$Outbound,
  z.ZodTypeDef,
  RateLimitErrorError
> = z.object({
  message: z.string(),
  type: z.string(),
  code: z.string(),
  details: z.lazy(() => RateLimitErrorDetails$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RateLimitErrorError$ {
  /** @deprecated use `RateLimitErrorError$inboundSchema` instead. */
  export const inboundSchema = RateLimitErrorError$inboundSchema;
  /** @deprecated use `RateLimitErrorError$outboundSchema` instead. */
  export const outboundSchema = RateLimitErrorError$outboundSchema;
  /** @deprecated use `RateLimitErrorError$Outbound` instead. */
  export type Outbound = RateLimitErrorError$Outbound;
}

export function rateLimitErrorErrorToJSON(
  rateLimitErrorError: RateLimitErrorError,
): string {
  return JSON.stringify(
    RateLimitErrorError$outboundSchema.parse(rateLimitErrorError),
  );
}

export function rateLimitErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<RateLimitErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RateLimitErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RateLimitErrorError' from JSON`,
  );
}

/** @internal */
export const RateLimitError$inboundSchema: z.ZodType<
  RateLimitError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => RateLimitErrorError$inboundSchema).optional(),
  _metadata: components.Metadata$inboundSchema.optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "_metadata": "metadata",
    });

    return new RateLimitError(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type RateLimitError$Outbound = {
  error?: RateLimitErrorError$Outbound | undefined;
  _metadata?: components.Metadata$Outbound | undefined;
};

/** @internal */
export const RateLimitError$outboundSchema: z.ZodType<
  RateLimitError$Outbound,
  z.ZodTypeDef,
  RateLimitError
> = z.instanceof(RateLimitError)
  .transform(v => v.data$)
  .pipe(
    z.object({
      error: z.lazy(() => RateLimitErrorError$outboundSchema).optional(),
      metadata: components.Metadata$outboundSchema.optional(),
    }).transform((v) => {
      return remap$(v, {
        metadata: "_metadata",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RateLimitError$ {
  /** @deprecated use `RateLimitError$inboundSchema` instead. */
  export const inboundSchema = RateLimitError$inboundSchema;
  /** @deprecated use `RateLimitError$outboundSchema` instead. */
  export const outboundSchema = RateLimitError$outboundSchema;
  /** @deprecated use `RateLimitError$Outbound` instead. */
  export type Outbound = RateLimitError$Outbound;
}
