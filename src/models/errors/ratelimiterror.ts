/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { NeosantaraError } from "./neosantaraerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const RateLimitErrorCode = {
  RpmExceeded: "rpm_exceeded",
  TpmExceeded: "tpm_exceeded",
  UserTotalDailyLimitExceeded: "user_total_daily_limit_exceeded",
  UserTotalMonthlyLimitExceeded: "user_total_monthly_limit_exceeded",
} as const;
export type RateLimitErrorCode = ClosedEnum<typeof RateLimitErrorCode>;

export type RateLimitErrorError = {
  message: string;
  type: string;
  code: RateLimitErrorCode;
  details?: components.RateLimitDetails | undefined;
};

/**
 * Rate limit exceeded
 */
export type RateLimitErrorData = {
  error?: RateLimitErrorError | undefined;
  infoMetadata?: components.Metadata | undefined;
};

/**
 * Rate limit exceeded
 */
export class RateLimitError extends NeosantaraError {
  error?: RateLimitErrorError | undefined;
  infoMetadata?: components.Metadata | undefined;

  /** The original data that was passed to this error instance. */
  data$: RateLimitErrorData;

  constructor(
    err: RateLimitErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.error?.message
      || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.error != null) this.error = err.error;
    if (err.infoMetadata != null) this.infoMetadata = err.infoMetadata;

    this.name = "RateLimitError";
  }
}

/** @internal */
export const RateLimitErrorCode$inboundSchema: z.ZodNativeEnum<
  typeof RateLimitErrorCode
> = z.nativeEnum(RateLimitErrorCode);

/** @internal */
export const RateLimitErrorCode$outboundSchema: z.ZodNativeEnum<
  typeof RateLimitErrorCode
> = RateLimitErrorCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RateLimitErrorCode$ {
  /** @deprecated use `RateLimitErrorCode$inboundSchema` instead. */
  export const inboundSchema = RateLimitErrorCode$inboundSchema;
  /** @deprecated use `RateLimitErrorCode$outboundSchema` instead. */
  export const outboundSchema = RateLimitErrorCode$outboundSchema;
}

/** @internal */
export const RateLimitErrorError$inboundSchema: z.ZodType<
  RateLimitErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  type: z.string(),
  code: RateLimitErrorCode$inboundSchema,
  details: components.RateLimitDetails$inboundSchema.optional(),
});

/** @internal */
export type RateLimitErrorError$Outbound = {
  message: string;
  type: string;
  code: string;
  details?: components.RateLimitDetails$Outbound | undefined;
};

/** @internal */
export const RateLimitErrorError$outboundSchema: z.ZodType<
  RateLimitErrorError$Outbound,
  z.ZodTypeDef,
  RateLimitErrorError
> = z.object({
  message: z.string(),
  type: z.string(),
  code: RateLimitErrorCode$outboundSchema,
  details: components.RateLimitDetails$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RateLimitErrorError$ {
  /** @deprecated use `RateLimitErrorError$inboundSchema` instead. */
  export const inboundSchema = RateLimitErrorError$inboundSchema;
  /** @deprecated use `RateLimitErrorError$outboundSchema` instead. */
  export const outboundSchema = RateLimitErrorError$outboundSchema;
  /** @deprecated use `RateLimitErrorError$Outbound` instead. */
  export type Outbound = RateLimitErrorError$Outbound;
}

export function rateLimitErrorErrorToJSON(
  rateLimitErrorError: RateLimitErrorError,
): string {
  return JSON.stringify(
    RateLimitErrorError$outboundSchema.parse(rateLimitErrorError),
  );
}

export function rateLimitErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<RateLimitErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RateLimitErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RateLimitErrorError' from JSON`,
  );
}

/** @internal */
export const RateLimitError$inboundSchema: z.ZodType<
  RateLimitError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => RateLimitErrorError$inboundSchema).optional(),
  info_metadata: components.Metadata$inboundSchema.optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "info_metadata": "infoMetadata",
    });

    return new RateLimitError(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type RateLimitError$Outbound = {
  error?: RateLimitErrorError$Outbound | undefined;
  info_metadata?: components.Metadata$Outbound | undefined;
};

/** @internal */
export const RateLimitError$outboundSchema: z.ZodType<
  RateLimitError$Outbound,
  z.ZodTypeDef,
  RateLimitError
> = z.instanceof(RateLimitError)
  .transform(v => v.data$)
  .pipe(
    z.object({
      error: z.lazy(() => RateLimitErrorError$outboundSchema).optional(),
      infoMetadata: components.Metadata$outboundSchema.optional(),
    }).transform((v) => {
      return remap$(v, {
        infoMetadata: "info_metadata",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RateLimitError$ {
  /** @deprecated use `RateLimitError$inboundSchema` instead. */
  export const inboundSchema = RateLimitError$inboundSchema;
  /** @deprecated use `RateLimitError$outboundSchema` instead. */
  export const outboundSchema = RateLimitError$outboundSchema;
  /** @deprecated use `RateLimitError$Outbound` instead. */
  export type Outbound = RateLimitError$Outbound;
}
