/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as models from "../index.js";
import { SDKError } from "./sdkerror.js";

/**
 * Error jika API key salah/kurang.
 */
export type AuthErrorData = {
  error?: models.AuthErrorError | undefined;
  /**
   * Metadata response dari NusantaraAI.
   */
  metadata?: models.Metadata | undefined;
};

/**
 * Error jika API key salah/kurang.
 */
export class AuthError extends SDKError {
  error?: models.AuthErrorError | undefined;
  /**
   * Metadata response dari NusantaraAI.
   */
  metadata?: models.Metadata | undefined;

  /** The original data that was passed to this error instance. */
  data$: AuthErrorData;

  constructor(
    err: AuthErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.error != null) this.error = err.error;
    if (err.metadata != null) this.metadata = err.metadata;

    this.name = "AuthError";
  }
}

/** @internal */
export const AuthError$inboundSchema: z.ZodType<
  AuthError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => models.AuthErrorError$inboundSchema).optional(),
  _metadata: models.Metadata$inboundSchema.optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "_metadata": "metadata",
    });

    return new AuthError(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AuthError$Outbound = {
  error?: models.AuthErrorError$Outbound | undefined;
  _metadata?: models.Metadata$Outbound | undefined;
};

/** @internal */
export const AuthError$outboundSchema: z.ZodType<
  AuthError$Outbound,
  z.ZodTypeDef,
  AuthError
> = z.instanceof(AuthError)
  .transform(v => v.data$)
  .pipe(
    z.object({
      error: z.lazy(() => models.AuthErrorError$outboundSchema).optional(),
      metadata: models.Metadata$outboundSchema.optional(),
    }).transform((v) => {
      return remap$(v, {
        metadata: "_metadata",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthError$ {
  /** @deprecated use `AuthError$inboundSchema` instead. */
  export const inboundSchema = AuthError$inboundSchema;
  /** @deprecated use `AuthError$outboundSchema` instead. */
  export const outboundSchema = AuthError$outboundSchema;
  /** @deprecated use `AuthError$Outbound` instead. */
  export type Outbound = AuthError$Outbound;
}
