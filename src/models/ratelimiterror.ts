/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Detail informasi rate limit
 */
export type RateLimitErrorDetails = {
  /**
   * Batas maksimal
   */
  limit?: number | undefined;
  /**
   * Sisa kuota
   */
  remaining?: number | undefined;
  /**
   * Waktu reset limit
   */
  reset?: Date | undefined;
  /**
   * Retry setelah berapa detik
   */
  retryAfter?: number | undefined;
};

export type RateLimitErrorError = {
  message: string;
  type: string;
  code: string;
  /**
   * Detail informasi rate limit
   */
  details?: RateLimitErrorDetails | undefined;
};

/** @internal */
export const RateLimitErrorDetails$inboundSchema: z.ZodType<
  RateLimitErrorDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().optional(),
  remaining: z.number().int().optional(),
  reset: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  retry_after: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "retry_after": "retryAfter",
  });
});

/** @internal */
export type RateLimitErrorDetails$Outbound = {
  limit?: number | undefined;
  remaining?: number | undefined;
  reset?: string | undefined;
  retry_after?: number | undefined;
};

/** @internal */
export const RateLimitErrorDetails$outboundSchema: z.ZodType<
  RateLimitErrorDetails$Outbound,
  z.ZodTypeDef,
  RateLimitErrorDetails
> = z.object({
  limit: z.number().int().optional(),
  remaining: z.number().int().optional(),
  reset: z.date().transform(v => v.toISOString()).optional(),
  retryAfter: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    retryAfter: "retry_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RateLimitErrorDetails$ {
  /** @deprecated use `RateLimitErrorDetails$inboundSchema` instead. */
  export const inboundSchema = RateLimitErrorDetails$inboundSchema;
  /** @deprecated use `RateLimitErrorDetails$outboundSchema` instead. */
  export const outboundSchema = RateLimitErrorDetails$outboundSchema;
  /** @deprecated use `RateLimitErrorDetails$Outbound` instead. */
  export type Outbound = RateLimitErrorDetails$Outbound;
}

export function rateLimitErrorDetailsToJSON(
  rateLimitErrorDetails: RateLimitErrorDetails,
): string {
  return JSON.stringify(
    RateLimitErrorDetails$outboundSchema.parse(rateLimitErrorDetails),
  );
}

export function rateLimitErrorDetailsFromJSON(
  jsonString: string,
): SafeParseResult<RateLimitErrorDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RateLimitErrorDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RateLimitErrorDetails' from JSON`,
  );
}

/** @internal */
export const RateLimitErrorError$inboundSchema: z.ZodType<
  RateLimitErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  type: z.string(),
  code: z.string(),
  details: z.lazy(() => RateLimitErrorDetails$inboundSchema).optional(),
});

/** @internal */
export type RateLimitErrorError$Outbound = {
  message: string;
  type: string;
  code: string;
  details?: RateLimitErrorDetails$Outbound | undefined;
};

/** @internal */
export const RateLimitErrorError$outboundSchema: z.ZodType<
  RateLimitErrorError$Outbound,
  z.ZodTypeDef,
  RateLimitErrorError
> = z.object({
  message: z.string(),
  type: z.string(),
  code: z.string(),
  details: z.lazy(() => RateLimitErrorDetails$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RateLimitErrorError$ {
  /** @deprecated use `RateLimitErrorError$inboundSchema` instead. */
  export const inboundSchema = RateLimitErrorError$inboundSchema;
  /** @deprecated use `RateLimitErrorError$outboundSchema` instead. */
  export const outboundSchema = RateLimitErrorError$outboundSchema;
  /** @deprecated use `RateLimitErrorError$Outbound` instead. */
  export type Outbound = RateLimitErrorError$Outbound;
}

export function rateLimitErrorErrorToJSON(
  rateLimitErrorError: RateLimitErrorError,
): string {
  return JSON.stringify(
    RateLimitErrorError$outboundSchema.parse(rateLimitErrorError),
  );
}

export function rateLimitErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<RateLimitErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RateLimitErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RateLimitErrorError' from JSON`,
  );
}
