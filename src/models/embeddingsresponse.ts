/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";

export type EmbeddingsResponseData = {
  object?: string | undefined;
  embedding?: Array<number> | undefined;
  index?: number | undefined;
};

export type EmbeddingsResponseUsage = {
  promptTokens?: number | undefined;
  totalTokens?: number | undefined;
};

/**
 * Response dari embeddings endpoint.
 */
export type EmbeddingsResponse = {
  object?: string | undefined;
  data?: Array<EmbeddingsResponseData> | undefined;
  model?: string | undefined;
  usage?: EmbeddingsResponseUsage | undefined;
  /**
   * Metadata response dari NusantaraAI.
   */
  metadata?: Metadata | undefined;
};

/** @internal */
export const EmbeddingsResponseData$inboundSchema: z.ZodType<
  EmbeddingsResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: z.string().optional(),
  embedding: z.array(z.number()).optional(),
  index: z.number().int().optional(),
});

/** @internal */
export type EmbeddingsResponseData$Outbound = {
  object?: string | undefined;
  embedding?: Array<number> | undefined;
  index?: number | undefined;
};

/** @internal */
export const EmbeddingsResponseData$outboundSchema: z.ZodType<
  EmbeddingsResponseData$Outbound,
  z.ZodTypeDef,
  EmbeddingsResponseData
> = z.object({
  object: z.string().optional(),
  embedding: z.array(z.number()).optional(),
  index: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbeddingsResponseData$ {
  /** @deprecated use `EmbeddingsResponseData$inboundSchema` instead. */
  export const inboundSchema = EmbeddingsResponseData$inboundSchema;
  /** @deprecated use `EmbeddingsResponseData$outboundSchema` instead. */
  export const outboundSchema = EmbeddingsResponseData$outboundSchema;
  /** @deprecated use `EmbeddingsResponseData$Outbound` instead. */
  export type Outbound = EmbeddingsResponseData$Outbound;
}

export function embeddingsResponseDataToJSON(
  embeddingsResponseData: EmbeddingsResponseData,
): string {
  return JSON.stringify(
    EmbeddingsResponseData$outboundSchema.parse(embeddingsResponseData),
  );
}

export function embeddingsResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<EmbeddingsResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmbeddingsResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmbeddingsResponseData' from JSON`,
  );
}

/** @internal */
export const EmbeddingsResponseUsage$inboundSchema: z.ZodType<
  EmbeddingsResponseUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt_tokens: z.number().int().optional(),
  total_tokens: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "prompt_tokens": "promptTokens",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type EmbeddingsResponseUsage$Outbound = {
  prompt_tokens?: number | undefined;
  total_tokens?: number | undefined;
};

/** @internal */
export const EmbeddingsResponseUsage$outboundSchema: z.ZodType<
  EmbeddingsResponseUsage$Outbound,
  z.ZodTypeDef,
  EmbeddingsResponseUsage
> = z.object({
  promptTokens: z.number().int().optional(),
  totalTokens: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbeddingsResponseUsage$ {
  /** @deprecated use `EmbeddingsResponseUsage$inboundSchema` instead. */
  export const inboundSchema = EmbeddingsResponseUsage$inboundSchema;
  /** @deprecated use `EmbeddingsResponseUsage$outboundSchema` instead. */
  export const outboundSchema = EmbeddingsResponseUsage$outboundSchema;
  /** @deprecated use `EmbeddingsResponseUsage$Outbound` instead. */
  export type Outbound = EmbeddingsResponseUsage$Outbound;
}

export function embeddingsResponseUsageToJSON(
  embeddingsResponseUsage: EmbeddingsResponseUsage,
): string {
  return JSON.stringify(
    EmbeddingsResponseUsage$outboundSchema.parse(embeddingsResponseUsage),
  );
}

export function embeddingsResponseUsageFromJSON(
  jsonString: string,
): SafeParseResult<EmbeddingsResponseUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmbeddingsResponseUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmbeddingsResponseUsage' from JSON`,
  );
}

/** @internal */
export const EmbeddingsResponse$inboundSchema: z.ZodType<
  EmbeddingsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: z.string().optional(),
  data: z.array(z.lazy(() => EmbeddingsResponseData$inboundSchema)).optional(),
  model: z.string().optional(),
  usage: z.lazy(() => EmbeddingsResponseUsage$inboundSchema).optional(),
  _metadata: Metadata$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_metadata": "metadata",
  });
});

/** @internal */
export type EmbeddingsResponse$Outbound = {
  object?: string | undefined;
  data?: Array<EmbeddingsResponseData$Outbound> | undefined;
  model?: string | undefined;
  usage?: EmbeddingsResponseUsage$Outbound | undefined;
  _metadata?: Metadata$Outbound | undefined;
};

/** @internal */
export const EmbeddingsResponse$outboundSchema: z.ZodType<
  EmbeddingsResponse$Outbound,
  z.ZodTypeDef,
  EmbeddingsResponse
> = z.object({
  object: z.string().optional(),
  data: z.array(z.lazy(() => EmbeddingsResponseData$outboundSchema)).optional(),
  model: z.string().optional(),
  usage: z.lazy(() => EmbeddingsResponseUsage$outboundSchema).optional(),
  metadata: Metadata$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    metadata: "_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbeddingsResponse$ {
  /** @deprecated use `EmbeddingsResponse$inboundSchema` instead. */
  export const inboundSchema = EmbeddingsResponse$inboundSchema;
  /** @deprecated use `EmbeddingsResponse$outboundSchema` instead. */
  export const outboundSchema = EmbeddingsResponse$outboundSchema;
  /** @deprecated use `EmbeddingsResponse$Outbound` instead. */
  export type Outbound = EmbeddingsResponse$Outbound;
}

export function embeddingsResponseToJSON(
  embeddingsResponse: EmbeddingsResponse,
): string {
  return JSON.stringify(
    EmbeddingsResponse$outboundSchema.parse(embeddingsResponse),
  );
}

export function embeddingsResponseFromJSON(
  jsonString: string,
): SafeParseResult<EmbeddingsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmbeddingsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmbeddingsResponse' from JSON`,
  );
}
