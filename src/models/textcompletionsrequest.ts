/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const TextCompletionsRequestType = {
  Text: "text",
  JsonObject: "json_object",
} as const;
export type TextCompletionsRequestType = ClosedEnum<
  typeof TextCompletionsRequestType
>;

export type TextCompletionsRequestResponseFormat = {
  type?: TextCompletionsRequestType | undefined;
};

export type TextCompletionsRequest = {
  model: string;
  prompt: string;
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  stream?: boolean | undefined;
  n?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  responseFormat?: TextCompletionsRequestResponseFormat | undefined;
};

/** @internal */
export const TextCompletionsRequestType$inboundSchema: z.ZodNativeEnum<
  typeof TextCompletionsRequestType
> = z.nativeEnum(TextCompletionsRequestType);

/** @internal */
export const TextCompletionsRequestType$outboundSchema: z.ZodNativeEnum<
  typeof TextCompletionsRequestType
> = TextCompletionsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextCompletionsRequestType$ {
  /** @deprecated use `TextCompletionsRequestType$inboundSchema` instead. */
  export const inboundSchema = TextCompletionsRequestType$inboundSchema;
  /** @deprecated use `TextCompletionsRequestType$outboundSchema` instead. */
  export const outboundSchema = TextCompletionsRequestType$outboundSchema;
}

/** @internal */
export const TextCompletionsRequestResponseFormat$inboundSchema: z.ZodType<
  TextCompletionsRequestResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TextCompletionsRequestType$inboundSchema.default("text"),
});

/** @internal */
export type TextCompletionsRequestResponseFormat$Outbound = {
  type: string;
};

/** @internal */
export const TextCompletionsRequestResponseFormat$outboundSchema: z.ZodType<
  TextCompletionsRequestResponseFormat$Outbound,
  z.ZodTypeDef,
  TextCompletionsRequestResponseFormat
> = z.object({
  type: TextCompletionsRequestType$outboundSchema.default("text"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextCompletionsRequestResponseFormat$ {
  /** @deprecated use `TextCompletionsRequestResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    TextCompletionsRequestResponseFormat$inboundSchema;
  /** @deprecated use `TextCompletionsRequestResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    TextCompletionsRequestResponseFormat$outboundSchema;
  /** @deprecated use `TextCompletionsRequestResponseFormat$Outbound` instead. */
  export type Outbound = TextCompletionsRequestResponseFormat$Outbound;
}

export function textCompletionsRequestResponseFormatToJSON(
  textCompletionsRequestResponseFormat: TextCompletionsRequestResponseFormat,
): string {
  return JSON.stringify(
    TextCompletionsRequestResponseFormat$outboundSchema.parse(
      textCompletionsRequestResponseFormat,
    ),
  );
}

export function textCompletionsRequestResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<TextCompletionsRequestResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TextCompletionsRequestResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TextCompletionsRequestResponseFormat' from JSON`,
  );
}

/** @internal */
export const TextCompletionsRequest$inboundSchema: z.ZodType<
  TextCompletionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
  prompt: z.string(),
  temperature: z.number().default(0.7),
  max_tokens: z.number().int().default(1000),
  stream: z.boolean().default(false),
  n: z.number().int().default(1),
  top_p: z.number().default(1),
  frequency_penalty: z.number().default(0),
  presence_penalty: z.number().default(0),
  response_format: z.lazy(() =>
    TextCompletionsRequestResponseFormat$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "max_tokens": "maxTokens",
    "top_p": "topP",
    "frequency_penalty": "frequencyPenalty",
    "presence_penalty": "presencePenalty",
    "response_format": "responseFormat",
  });
});

/** @internal */
export type TextCompletionsRequest$Outbound = {
  model: string;
  prompt: string;
  temperature: number;
  max_tokens: number;
  stream: boolean;
  n: number;
  top_p: number;
  frequency_penalty: number;
  presence_penalty: number;
  response_format?: TextCompletionsRequestResponseFormat$Outbound | undefined;
};

/** @internal */
export const TextCompletionsRequest$outboundSchema: z.ZodType<
  TextCompletionsRequest$Outbound,
  z.ZodTypeDef,
  TextCompletionsRequest
> = z.object({
  model: z.string(),
  prompt: z.string(),
  temperature: z.number().default(0.7),
  maxTokens: z.number().int().default(1000),
  stream: z.boolean().default(false),
  n: z.number().int().default(1),
  topP: z.number().default(1),
  frequencyPenalty: z.number().default(0),
  presencePenalty: z.number().default(0),
  responseFormat: z.lazy(() =>
    TextCompletionsRequestResponseFormat$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    maxTokens: "max_tokens",
    topP: "top_p",
    frequencyPenalty: "frequency_penalty",
    presencePenalty: "presence_penalty",
    responseFormat: "response_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextCompletionsRequest$ {
  /** @deprecated use `TextCompletionsRequest$inboundSchema` instead. */
  export const inboundSchema = TextCompletionsRequest$inboundSchema;
  /** @deprecated use `TextCompletionsRequest$outboundSchema` instead. */
  export const outboundSchema = TextCompletionsRequest$outboundSchema;
  /** @deprecated use `TextCompletionsRequest$Outbound` instead. */
  export type Outbound = TextCompletionsRequest$Outbound;
}

export function textCompletionsRequestToJSON(
  textCompletionsRequest: TextCompletionsRequest,
): string {
  return JSON.stringify(
    TextCompletionsRequest$outboundSchema.parse(textCompletionsRequest),
  );
}

export function textCompletionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<TextCompletionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TextCompletionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TextCompletionsRequest' from JSON`,
  );
}
