/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";

export type TextCompletionResponseChoice = {
  text?: string | undefined;
  index?: number | undefined;
  logprobs?: string | null | undefined;
  finishReason?: string | undefined;
};

export type TextCompletionResponseUsage = {
  promptTokens?: number | undefined;
  completionTokens?: number | undefined;
  totalTokens?: number | undefined;
};

export type TextCompletionResponse = {
  id?: string | undefined;
  object?: string | undefined;
  created?: number | undefined;
  model?: string | undefined;
  choices?: Array<TextCompletionResponseChoice> | undefined;
  usage?: TextCompletionResponseUsage | undefined;
  /**
   * Metadata response dari NusantaraAI.
   */
  metadata?: Metadata | undefined;
};

/** @internal */
export const TextCompletionResponseChoice$inboundSchema: z.ZodType<
  TextCompletionResponseChoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string().optional(),
  index: z.number().int().optional(),
  logprobs: z.nullable(z.string()).optional(),
  finish_reason: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type TextCompletionResponseChoice$Outbound = {
  text?: string | undefined;
  index?: number | undefined;
  logprobs?: string | null | undefined;
  finish_reason?: string | undefined;
};

/** @internal */
export const TextCompletionResponseChoice$outboundSchema: z.ZodType<
  TextCompletionResponseChoice$Outbound,
  z.ZodTypeDef,
  TextCompletionResponseChoice
> = z.object({
  text: z.string().optional(),
  index: z.number().int().optional(),
  logprobs: z.nullable(z.string()).optional(),
  finishReason: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextCompletionResponseChoice$ {
  /** @deprecated use `TextCompletionResponseChoice$inboundSchema` instead. */
  export const inboundSchema = TextCompletionResponseChoice$inboundSchema;
  /** @deprecated use `TextCompletionResponseChoice$outboundSchema` instead. */
  export const outboundSchema = TextCompletionResponseChoice$outboundSchema;
  /** @deprecated use `TextCompletionResponseChoice$Outbound` instead. */
  export type Outbound = TextCompletionResponseChoice$Outbound;
}

export function textCompletionResponseChoiceToJSON(
  textCompletionResponseChoice: TextCompletionResponseChoice,
): string {
  return JSON.stringify(
    TextCompletionResponseChoice$outboundSchema.parse(
      textCompletionResponseChoice,
    ),
  );
}

export function textCompletionResponseChoiceFromJSON(
  jsonString: string,
): SafeParseResult<TextCompletionResponseChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TextCompletionResponseChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TextCompletionResponseChoice' from JSON`,
  );
}

/** @internal */
export const TextCompletionResponseUsage$inboundSchema: z.ZodType<
  TextCompletionResponseUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt_tokens: z.number().int().optional(),
  completion_tokens: z.number().int().optional(),
  total_tokens: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "prompt_tokens": "promptTokens",
    "completion_tokens": "completionTokens",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type TextCompletionResponseUsage$Outbound = {
  prompt_tokens?: number | undefined;
  completion_tokens?: number | undefined;
  total_tokens?: number | undefined;
};

/** @internal */
export const TextCompletionResponseUsage$outboundSchema: z.ZodType<
  TextCompletionResponseUsage$Outbound,
  z.ZodTypeDef,
  TextCompletionResponseUsage
> = z.object({
  promptTokens: z.number().int().optional(),
  completionTokens: z.number().int().optional(),
  totalTokens: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextCompletionResponseUsage$ {
  /** @deprecated use `TextCompletionResponseUsage$inboundSchema` instead. */
  export const inboundSchema = TextCompletionResponseUsage$inboundSchema;
  /** @deprecated use `TextCompletionResponseUsage$outboundSchema` instead. */
  export const outboundSchema = TextCompletionResponseUsage$outboundSchema;
  /** @deprecated use `TextCompletionResponseUsage$Outbound` instead. */
  export type Outbound = TextCompletionResponseUsage$Outbound;
}

export function textCompletionResponseUsageToJSON(
  textCompletionResponseUsage: TextCompletionResponseUsage,
): string {
  return JSON.stringify(
    TextCompletionResponseUsage$outboundSchema.parse(
      textCompletionResponseUsage,
    ),
  );
}

export function textCompletionResponseUsageFromJSON(
  jsonString: string,
): SafeParseResult<TextCompletionResponseUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TextCompletionResponseUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TextCompletionResponseUsage' from JSON`,
  );
}

/** @internal */
export const TextCompletionResponse$inboundSchema: z.ZodType<
  TextCompletionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  object: z.string().optional(),
  created: z.number().int().optional(),
  model: z.string().optional(),
  choices: z.array(z.lazy(() => TextCompletionResponseChoice$inboundSchema))
    .optional(),
  usage: z.lazy(() => TextCompletionResponseUsage$inboundSchema).optional(),
  _metadata: Metadata$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_metadata": "metadata",
  });
});

/** @internal */
export type TextCompletionResponse$Outbound = {
  id?: string | undefined;
  object?: string | undefined;
  created?: number | undefined;
  model?: string | undefined;
  choices?: Array<TextCompletionResponseChoice$Outbound> | undefined;
  usage?: TextCompletionResponseUsage$Outbound | undefined;
  _metadata?: Metadata$Outbound | undefined;
};

/** @internal */
export const TextCompletionResponse$outboundSchema: z.ZodType<
  TextCompletionResponse$Outbound,
  z.ZodTypeDef,
  TextCompletionResponse
> = z.object({
  id: z.string().optional(),
  object: z.string().optional(),
  created: z.number().int().optional(),
  model: z.string().optional(),
  choices: z.array(z.lazy(() => TextCompletionResponseChoice$outboundSchema))
    .optional(),
  usage: z.lazy(() => TextCompletionResponseUsage$outboundSchema).optional(),
  metadata: Metadata$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    metadata: "_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextCompletionResponse$ {
  /** @deprecated use `TextCompletionResponse$inboundSchema` instead. */
  export const inboundSchema = TextCompletionResponse$inboundSchema;
  /** @deprecated use `TextCompletionResponse$outboundSchema` instead. */
  export const outboundSchema = TextCompletionResponse$outboundSchema;
  /** @deprecated use `TextCompletionResponse$Outbound` instead. */
  export type Outbound = TextCompletionResponse$Outbound;
}

export function textCompletionResponseToJSON(
  textCompletionResponse: TextCompletionResponse,
): string {
  return JSON.stringify(
    TextCompletionResponse$outboundSchema.parse(textCompletionResponse),
  );
}

export function textCompletionResponseFromJSON(
  jsonString: string,
): SafeParseResult<TextCompletionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TextCompletionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TextCompletionResponse' from JSON`,
  );
}
