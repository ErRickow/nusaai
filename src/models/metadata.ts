/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Metadata response dari NusantaraAI.
 */
export type Metadata = {
  /**
   * Pembuat API
   */
  creator?: string | undefined;
  /**
   * Status response (true = sukses, false = error)
   */
  status?: boolean | undefined;
  /**
   * Timestamp response
   */
  timestamp?: Date | undefined;
  /**
   * ID unik untuk request
   */
  requestId?: string | undefined;
  /**
   * Waktu pemrosesan dalam detik
   */
  processingTime?: number | undefined;
};

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  creator: z.string().optional(),
  status: z.boolean().optional(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  request_id: z.string().optional(),
  processing_time: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
    "processing_time": "processingTime",
  });
});

/** @internal */
export type Metadata$Outbound = {
  creator?: string | undefined;
  status?: boolean | undefined;
  timestamp?: string | undefined;
  request_id?: string | undefined;
  processing_time?: number | undefined;
};

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.object({
  creator: z.string().optional(),
  status: z.boolean().optional(),
  timestamp: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.string().optional(),
  processingTime: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
    processingTime: "processing_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

export function metadataToJSON(metadata: Metadata): string {
  return JSON.stringify(Metadata$outboundSchema.parse(metadata));
}

export function metadataFromJSON(
  jsonString: string,
): SafeParseResult<Metadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metadata' from JSON`,
  );
}
