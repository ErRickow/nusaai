/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ChatCompletionsRequestRole = {
  System: "system",
  User: "user",
  Assistant: "assistant",
} as const;
export type ChatCompletionsRequestRole = ClosedEnum<
  typeof ChatCompletionsRequestRole
>;

export type ChatCompletionsRequestMessage = {
  role: ChatCompletionsRequestRole;
  content: string;
};

export const ChatCompletionsRequestType = {
  Text: "text",
  JsonObject: "json_object",
} as const;
export type ChatCompletionsRequestType = ClosedEnum<
  typeof ChatCompletionsRequestType
>;

export type ChatCompletionsRequestResponseFormat = {
  type?: ChatCompletionsRequestType | undefined;
};

export type FunctionT = {};

export type Tool = {};

/**
 * Request untuk chat completion.
 */
export type ChatCompletionsRequest = {
  /**
   * Nama model (wajib).
   */
  model: string;
  /**
   * Array pesan (role+content).
   */
  messages: Array<ChatCompletionsRequestMessage>;
  /**
   * Kontrol kreativitas response
   */
  temperature?: number | undefined;
  /**
   * Maksimal token output
   */
  maxTokens?: number | undefined;
  /**
   * Stream response
   */
  stream?: boolean | undefined;
  /**
   * Jumlah response yang dihasilkan
   */
  n?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  responseFormat?: ChatCompletionsRequestResponseFormat | undefined;
  /**
   * Fungsi yang tersedia untuk dipanggil
   */
  functions?: Array<FunctionT> | undefined;
  /**
   * Tools yang tersedia
   */
  tools?: Array<Tool> | undefined;
  /**
   * Cara pemilihan tool
   */
  toolChoice?: string | undefined;
  /**
   * Aktifkan web search
   */
  webSearch?: boolean | undefined;
};

/** @internal */
export const ChatCompletionsRequestRole$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionsRequestRole
> = z.nativeEnum(ChatCompletionsRequestRole);

/** @internal */
export const ChatCompletionsRequestRole$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionsRequestRole
> = ChatCompletionsRequestRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionsRequestRole$ {
  /** @deprecated use `ChatCompletionsRequestRole$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionsRequestRole$inboundSchema;
  /** @deprecated use `ChatCompletionsRequestRole$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionsRequestRole$outboundSchema;
}

/** @internal */
export const ChatCompletionsRequestMessage$inboundSchema: z.ZodType<
  ChatCompletionsRequestMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: ChatCompletionsRequestRole$inboundSchema,
  content: z.string(),
});

/** @internal */
export type ChatCompletionsRequestMessage$Outbound = {
  role: string;
  content: string;
};

/** @internal */
export const ChatCompletionsRequestMessage$outboundSchema: z.ZodType<
  ChatCompletionsRequestMessage$Outbound,
  z.ZodTypeDef,
  ChatCompletionsRequestMessage
> = z.object({
  role: ChatCompletionsRequestRole$outboundSchema,
  content: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionsRequestMessage$ {
  /** @deprecated use `ChatCompletionsRequestMessage$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionsRequestMessage$inboundSchema;
  /** @deprecated use `ChatCompletionsRequestMessage$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionsRequestMessage$outboundSchema;
  /** @deprecated use `ChatCompletionsRequestMessage$Outbound` instead. */
  export type Outbound = ChatCompletionsRequestMessage$Outbound;
}

export function chatCompletionsRequestMessageToJSON(
  chatCompletionsRequestMessage: ChatCompletionsRequestMessage,
): string {
  return JSON.stringify(
    ChatCompletionsRequestMessage$outboundSchema.parse(
      chatCompletionsRequestMessage,
    ),
  );
}

export function chatCompletionsRequestMessageFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionsRequestMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionsRequestMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionsRequestMessage' from JSON`,
  );
}

/** @internal */
export const ChatCompletionsRequestType$inboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionsRequestType
> = z.nativeEnum(ChatCompletionsRequestType);

/** @internal */
export const ChatCompletionsRequestType$outboundSchema: z.ZodNativeEnum<
  typeof ChatCompletionsRequestType
> = ChatCompletionsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionsRequestType$ {
  /** @deprecated use `ChatCompletionsRequestType$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionsRequestType$inboundSchema;
  /** @deprecated use `ChatCompletionsRequestType$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionsRequestType$outboundSchema;
}

/** @internal */
export const ChatCompletionsRequestResponseFormat$inboundSchema: z.ZodType<
  ChatCompletionsRequestResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ChatCompletionsRequestType$inboundSchema.default("text"),
});

/** @internal */
export type ChatCompletionsRequestResponseFormat$Outbound = {
  type: string;
};

/** @internal */
export const ChatCompletionsRequestResponseFormat$outboundSchema: z.ZodType<
  ChatCompletionsRequestResponseFormat$Outbound,
  z.ZodTypeDef,
  ChatCompletionsRequestResponseFormat
> = z.object({
  type: ChatCompletionsRequestType$outboundSchema.default("text"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionsRequestResponseFormat$ {
  /** @deprecated use `ChatCompletionsRequestResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    ChatCompletionsRequestResponseFormat$inboundSchema;
  /** @deprecated use `ChatCompletionsRequestResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionsRequestResponseFormat$outboundSchema;
  /** @deprecated use `ChatCompletionsRequestResponseFormat$Outbound` instead. */
  export type Outbound = ChatCompletionsRequestResponseFormat$Outbound;
}

export function chatCompletionsRequestResponseFormatToJSON(
  chatCompletionsRequestResponseFormat: ChatCompletionsRequestResponseFormat,
): string {
  return JSON.stringify(
    ChatCompletionsRequestResponseFormat$outboundSchema.parse(
      chatCompletionsRequestResponseFormat,
    ),
  );
}

export function chatCompletionsRequestResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionsRequestResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionsRequestResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionsRequestResponseFormat' from JSON`,
  );
}

/** @internal */
export const FunctionT$inboundSchema: z.ZodType<
  FunctionT,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type FunctionT$Outbound = {};

/** @internal */
export const FunctionT$outboundSchema: z.ZodType<
  FunctionT$Outbound,
  z.ZodTypeDef,
  FunctionT
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FunctionT$ {
  /** @deprecated use `FunctionT$inboundSchema` instead. */
  export const inboundSchema = FunctionT$inboundSchema;
  /** @deprecated use `FunctionT$outboundSchema` instead. */
  export const outboundSchema = FunctionT$outboundSchema;
  /** @deprecated use `FunctionT$Outbound` instead. */
  export type Outbound = FunctionT$Outbound;
}

export function functionToJSON(functionT: FunctionT): string {
  return JSON.stringify(FunctionT$outboundSchema.parse(functionT));
}

export function functionFromJSON(
  jsonString: string,
): SafeParseResult<FunctionT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FunctionT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FunctionT' from JSON`,
  );
}

/** @internal */
export const Tool$inboundSchema: z.ZodType<Tool, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Tool$Outbound = {};

/** @internal */
export const Tool$outboundSchema: z.ZodType<Tool$Outbound, z.ZodTypeDef, Tool> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tool$ {
  /** @deprecated use `Tool$inboundSchema` instead. */
  export const inboundSchema = Tool$inboundSchema;
  /** @deprecated use `Tool$outboundSchema` instead. */
  export const outboundSchema = Tool$outboundSchema;
  /** @deprecated use `Tool$Outbound` instead. */
  export type Outbound = Tool$Outbound;
}

export function toolToJSON(tool: Tool): string {
  return JSON.stringify(Tool$outboundSchema.parse(tool));
}

export function toolFromJSON(
  jsonString: string,
): SafeParseResult<Tool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tool' from JSON`,
  );
}

/** @internal */
export const ChatCompletionsRequest$inboundSchema: z.ZodType<
  ChatCompletionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
  messages: z.array(z.lazy(() => ChatCompletionsRequestMessage$inboundSchema)),
  temperature: z.number().default(0.7),
  max_tokens: z.number().int().default(1000),
  stream: z.boolean().default(false),
  n: z.number().int().default(1),
  top_p: z.number().default(1),
  frequency_penalty: z.number().default(0),
  presence_penalty: z.number().default(0),
  response_format: z.lazy(() =>
    ChatCompletionsRequestResponseFormat$inboundSchema
  ).optional(),
  functions: z.array(z.lazy(() => FunctionT$inboundSchema)).optional(),
  tools: z.array(z.lazy(() => Tool$inboundSchema)).optional(),
  tool_choice: z.string().default("auto"),
  web_search: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "max_tokens": "maxTokens",
    "top_p": "topP",
    "frequency_penalty": "frequencyPenalty",
    "presence_penalty": "presencePenalty",
    "response_format": "responseFormat",
    "tool_choice": "toolChoice",
    "web_search": "webSearch",
  });
});

/** @internal */
export type ChatCompletionsRequest$Outbound = {
  model: string;
  messages: Array<ChatCompletionsRequestMessage$Outbound>;
  temperature: number;
  max_tokens: number;
  stream: boolean;
  n: number;
  top_p: number;
  frequency_penalty: number;
  presence_penalty: number;
  response_format?: ChatCompletionsRequestResponseFormat$Outbound | undefined;
  functions?: Array<FunctionT$Outbound> | undefined;
  tools?: Array<Tool$Outbound> | undefined;
  tool_choice: string;
  web_search: boolean;
};

/** @internal */
export const ChatCompletionsRequest$outboundSchema: z.ZodType<
  ChatCompletionsRequest$Outbound,
  z.ZodTypeDef,
  ChatCompletionsRequest
> = z.object({
  model: z.string(),
  messages: z.array(z.lazy(() => ChatCompletionsRequestMessage$outboundSchema)),
  temperature: z.number().default(0.7),
  maxTokens: z.number().int().default(1000),
  stream: z.boolean().default(false),
  n: z.number().int().default(1),
  topP: z.number().default(1),
  frequencyPenalty: z.number().default(0),
  presencePenalty: z.number().default(0),
  responseFormat: z.lazy(() =>
    ChatCompletionsRequestResponseFormat$outboundSchema
  ).optional(),
  functions: z.array(z.lazy(() => FunctionT$outboundSchema)).optional(),
  tools: z.array(z.lazy(() => Tool$outboundSchema)).optional(),
  toolChoice: z.string().default("auto"),
  webSearch: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    maxTokens: "max_tokens",
    topP: "top_p",
    frequencyPenalty: "frequency_penalty",
    presencePenalty: "presence_penalty",
    responseFormat: "response_format",
    toolChoice: "tool_choice",
    webSearch: "web_search",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionsRequest$ {
  /** @deprecated use `ChatCompletionsRequest$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionsRequest$inboundSchema;
  /** @deprecated use `ChatCompletionsRequest$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionsRequest$outboundSchema;
  /** @deprecated use `ChatCompletionsRequest$Outbound` instead. */
  export type Outbound = ChatCompletionsRequest$Outbound;
}

export function chatCompletionsRequestToJSON(
  chatCompletionsRequest: ChatCompletionsRequest,
): string {
  return JSON.stringify(
    ChatCompletionsRequest$outboundSchema.parse(chatCompletionsRequest),
  );
}

export function chatCompletionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionsRequest' from JSON`,
  );
}
