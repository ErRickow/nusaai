/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ReasoningRequestRole = {
  System: "system",
  User: "user",
  Assistant: "assistant",
} as const;
export type ReasoningRequestRole = ClosedEnum<typeof ReasoningRequestRole>;

export type ReasoningRequestMessage = {
  role?: ReasoningRequestRole | undefined;
  content?: string | undefined;
};

export const ReasoningRequestType = {
  Text: "text",
  JsonObject: "json_object",
} as const;
export type ReasoningRequestType = ClosedEnum<typeof ReasoningRequestType>;

export type ReasoningRequestResponseFormat = {
  type?: ReasoningRequestType | undefined;
};

export type ReasoningRequest = {
  /**
   * Model yang digunakan
   */
  model?: string | undefined;
  messages: Array<ReasoningRequestMessage>;
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  stream?: boolean | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  responseFormat?: ReasoningRequestResponseFormat | undefined;
};

/** @internal */
export const ReasoningRequestRole$inboundSchema: z.ZodNativeEnum<
  typeof ReasoningRequestRole
> = z.nativeEnum(ReasoningRequestRole);

/** @internal */
export const ReasoningRequestRole$outboundSchema: z.ZodNativeEnum<
  typeof ReasoningRequestRole
> = ReasoningRequestRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningRequestRole$ {
  /** @deprecated use `ReasoningRequestRole$inboundSchema` instead. */
  export const inboundSchema = ReasoningRequestRole$inboundSchema;
  /** @deprecated use `ReasoningRequestRole$outboundSchema` instead. */
  export const outboundSchema = ReasoningRequestRole$outboundSchema;
}

/** @internal */
export const ReasoningRequestMessage$inboundSchema: z.ZodType<
  ReasoningRequestMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: ReasoningRequestRole$inboundSchema.optional(),
  content: z.string().optional(),
});

/** @internal */
export type ReasoningRequestMessage$Outbound = {
  role?: string | undefined;
  content?: string | undefined;
};

/** @internal */
export const ReasoningRequestMessage$outboundSchema: z.ZodType<
  ReasoningRequestMessage$Outbound,
  z.ZodTypeDef,
  ReasoningRequestMessage
> = z.object({
  role: ReasoningRequestRole$outboundSchema.optional(),
  content: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningRequestMessage$ {
  /** @deprecated use `ReasoningRequestMessage$inboundSchema` instead. */
  export const inboundSchema = ReasoningRequestMessage$inboundSchema;
  /** @deprecated use `ReasoningRequestMessage$outboundSchema` instead. */
  export const outboundSchema = ReasoningRequestMessage$outboundSchema;
  /** @deprecated use `ReasoningRequestMessage$Outbound` instead. */
  export type Outbound = ReasoningRequestMessage$Outbound;
}

export function reasoningRequestMessageToJSON(
  reasoningRequestMessage: ReasoningRequestMessage,
): string {
  return JSON.stringify(
    ReasoningRequestMessage$outboundSchema.parse(reasoningRequestMessage),
  );
}

export function reasoningRequestMessageFromJSON(
  jsonString: string,
): SafeParseResult<ReasoningRequestMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReasoningRequestMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReasoningRequestMessage' from JSON`,
  );
}

/** @internal */
export const ReasoningRequestType$inboundSchema: z.ZodNativeEnum<
  typeof ReasoningRequestType
> = z.nativeEnum(ReasoningRequestType);

/** @internal */
export const ReasoningRequestType$outboundSchema: z.ZodNativeEnum<
  typeof ReasoningRequestType
> = ReasoningRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningRequestType$ {
  /** @deprecated use `ReasoningRequestType$inboundSchema` instead. */
  export const inboundSchema = ReasoningRequestType$inboundSchema;
  /** @deprecated use `ReasoningRequestType$outboundSchema` instead. */
  export const outboundSchema = ReasoningRequestType$outboundSchema;
}

/** @internal */
export const ReasoningRequestResponseFormat$inboundSchema: z.ZodType<
  ReasoningRequestResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ReasoningRequestType$inboundSchema.default("text"),
});

/** @internal */
export type ReasoningRequestResponseFormat$Outbound = {
  type: string;
};

/** @internal */
export const ReasoningRequestResponseFormat$outboundSchema: z.ZodType<
  ReasoningRequestResponseFormat$Outbound,
  z.ZodTypeDef,
  ReasoningRequestResponseFormat
> = z.object({
  type: ReasoningRequestType$outboundSchema.default("text"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningRequestResponseFormat$ {
  /** @deprecated use `ReasoningRequestResponseFormat$inboundSchema` instead. */
  export const inboundSchema = ReasoningRequestResponseFormat$inboundSchema;
  /** @deprecated use `ReasoningRequestResponseFormat$outboundSchema` instead. */
  export const outboundSchema = ReasoningRequestResponseFormat$outboundSchema;
  /** @deprecated use `ReasoningRequestResponseFormat$Outbound` instead. */
  export type Outbound = ReasoningRequestResponseFormat$Outbound;
}

export function reasoningRequestResponseFormatToJSON(
  reasoningRequestResponseFormat: ReasoningRequestResponseFormat,
): string {
  return JSON.stringify(
    ReasoningRequestResponseFormat$outboundSchema.parse(
      reasoningRequestResponseFormat,
    ),
  );
}

export function reasoningRequestResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<ReasoningRequestResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReasoningRequestResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReasoningRequestResponseFormat' from JSON`,
  );
}

/** @internal */
export const ReasoningRequest$inboundSchema: z.ZodType<
  ReasoningRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string().optional(),
  messages: z.array(z.lazy(() => ReasoningRequestMessage$inboundSchema)),
  temperature: z.number().default(0.7),
  max_tokens: z.number().int().default(1500),
  stream: z.boolean().default(false),
  top_p: z.number().default(1),
  frequency_penalty: z.number().default(0),
  presence_penalty: z.number().default(0),
  response_format: z.lazy(() => ReasoningRequestResponseFormat$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "max_tokens": "maxTokens",
    "top_p": "topP",
    "frequency_penalty": "frequencyPenalty",
    "presence_penalty": "presencePenalty",
    "response_format": "responseFormat",
  });
});

/** @internal */
export type ReasoningRequest$Outbound = {
  model?: string | undefined;
  messages: Array<ReasoningRequestMessage$Outbound>;
  temperature: number;
  max_tokens: number;
  stream: boolean;
  top_p: number;
  frequency_penalty: number;
  presence_penalty: number;
  response_format?: ReasoningRequestResponseFormat$Outbound | undefined;
};

/** @internal */
export const ReasoningRequest$outboundSchema: z.ZodType<
  ReasoningRequest$Outbound,
  z.ZodTypeDef,
  ReasoningRequest
> = z.object({
  model: z.string().optional(),
  messages: z.array(z.lazy(() => ReasoningRequestMessage$outboundSchema)),
  temperature: z.number().default(0.7),
  maxTokens: z.number().int().default(1500),
  stream: z.boolean().default(false),
  topP: z.number().default(1),
  frequencyPenalty: z.number().default(0),
  presencePenalty: z.number().default(0),
  responseFormat: z.lazy(() => ReasoningRequestResponseFormat$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    maxTokens: "max_tokens",
    topP: "top_p",
    frequencyPenalty: "frequency_penalty",
    presencePenalty: "presence_penalty",
    responseFormat: "response_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningRequest$ {
  /** @deprecated use `ReasoningRequest$inboundSchema` instead. */
  export const inboundSchema = ReasoningRequest$inboundSchema;
  /** @deprecated use `ReasoningRequest$outboundSchema` instead. */
  export const outboundSchema = ReasoningRequest$outboundSchema;
  /** @deprecated use `ReasoningRequest$Outbound` instead. */
  export type Outbound = ReasoningRequest$Outbound;
}

export function reasoningRequestToJSON(
  reasoningRequest: ReasoningRequest,
): string {
  return JSON.stringify(
    ReasoningRequest$outboundSchema.parse(reasoningRequest),
  );
}

export function reasoningRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReasoningRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReasoningRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReasoningRequest' from JSON`,
  );
}
