/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";

export type ToolCall = {};

export type ChatCompletionsResponseMessage = {
  role?: string | undefined;
  content?: string | undefined;
  toolCalls?: Array<ToolCall> | undefined;
};

export type ChatCompletionsResponseChoice = {
  index?: number | undefined;
  message?: ChatCompletionsResponseMessage | undefined;
  finishReason?: string | undefined;
};

export type ChatCompletionsResponseUsage = {
  promptTokens?: number | undefined;
  completionTokens?: number | undefined;
  totalTokens?: number | undefined;
};

/**
 * Response chat completion.
 */
export type ChatCompletionsResponse = {
  id?: string | undefined;
  object?: string | undefined;
  created?: number | undefined;
  model?: string | undefined;
  choices?: Array<ChatCompletionsResponseChoice> | undefined;
  usage?: ChatCompletionsResponseUsage | undefined;
  /**
   * Metadata response dari NusantaraAI.
   */
  metadata?: Metadata | undefined;
};

/** @internal */
export const ToolCall$inboundSchema: z.ZodType<
  ToolCall,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ToolCall$Outbound = {};

/** @internal */
export const ToolCall$outboundSchema: z.ZodType<
  ToolCall$Outbound,
  z.ZodTypeDef,
  ToolCall
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolCall$ {
  /** @deprecated use `ToolCall$inboundSchema` instead. */
  export const inboundSchema = ToolCall$inboundSchema;
  /** @deprecated use `ToolCall$outboundSchema` instead. */
  export const outboundSchema = ToolCall$outboundSchema;
  /** @deprecated use `ToolCall$Outbound` instead. */
  export type Outbound = ToolCall$Outbound;
}

export function toolCallToJSON(toolCall: ToolCall): string {
  return JSON.stringify(ToolCall$outboundSchema.parse(toolCall));
}

export function toolCallFromJSON(
  jsonString: string,
): SafeParseResult<ToolCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolCall' from JSON`,
  );
}

/** @internal */
export const ChatCompletionsResponseMessage$inboundSchema: z.ZodType<
  ChatCompletionsResponseMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: z.string().optional(),
  content: z.string().optional(),
  tool_calls: z.array(z.lazy(() => ToolCall$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type ChatCompletionsResponseMessage$Outbound = {
  role?: string | undefined;
  content?: string | undefined;
  tool_calls?: Array<ToolCall$Outbound> | undefined;
};

/** @internal */
export const ChatCompletionsResponseMessage$outboundSchema: z.ZodType<
  ChatCompletionsResponseMessage$Outbound,
  z.ZodTypeDef,
  ChatCompletionsResponseMessage
> = z.object({
  role: z.string().optional(),
  content: z.string().optional(),
  toolCalls: z.array(z.lazy(() => ToolCall$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionsResponseMessage$ {
  /** @deprecated use `ChatCompletionsResponseMessage$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionsResponseMessage$inboundSchema;
  /** @deprecated use `ChatCompletionsResponseMessage$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionsResponseMessage$outboundSchema;
  /** @deprecated use `ChatCompletionsResponseMessage$Outbound` instead. */
  export type Outbound = ChatCompletionsResponseMessage$Outbound;
}

export function chatCompletionsResponseMessageToJSON(
  chatCompletionsResponseMessage: ChatCompletionsResponseMessage,
): string {
  return JSON.stringify(
    ChatCompletionsResponseMessage$outboundSchema.parse(
      chatCompletionsResponseMessage,
    ),
  );
}

export function chatCompletionsResponseMessageFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionsResponseMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionsResponseMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionsResponseMessage' from JSON`,
  );
}

/** @internal */
export const ChatCompletionsResponseChoice$inboundSchema: z.ZodType<
  ChatCompletionsResponseChoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number().int().optional(),
  message: z.lazy(() => ChatCompletionsResponseMessage$inboundSchema)
    .optional(),
  finish_reason: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type ChatCompletionsResponseChoice$Outbound = {
  index?: number | undefined;
  message?: ChatCompletionsResponseMessage$Outbound | undefined;
  finish_reason?: string | undefined;
};

/** @internal */
export const ChatCompletionsResponseChoice$outboundSchema: z.ZodType<
  ChatCompletionsResponseChoice$Outbound,
  z.ZodTypeDef,
  ChatCompletionsResponseChoice
> = z.object({
  index: z.number().int().optional(),
  message: z.lazy(() => ChatCompletionsResponseMessage$outboundSchema)
    .optional(),
  finishReason: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionsResponseChoice$ {
  /** @deprecated use `ChatCompletionsResponseChoice$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionsResponseChoice$inboundSchema;
  /** @deprecated use `ChatCompletionsResponseChoice$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionsResponseChoice$outboundSchema;
  /** @deprecated use `ChatCompletionsResponseChoice$Outbound` instead. */
  export type Outbound = ChatCompletionsResponseChoice$Outbound;
}

export function chatCompletionsResponseChoiceToJSON(
  chatCompletionsResponseChoice: ChatCompletionsResponseChoice,
): string {
  return JSON.stringify(
    ChatCompletionsResponseChoice$outboundSchema.parse(
      chatCompletionsResponseChoice,
    ),
  );
}

export function chatCompletionsResponseChoiceFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionsResponseChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionsResponseChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionsResponseChoice' from JSON`,
  );
}

/** @internal */
export const ChatCompletionsResponseUsage$inboundSchema: z.ZodType<
  ChatCompletionsResponseUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt_tokens: z.number().int().optional(),
  completion_tokens: z.number().int().optional(),
  total_tokens: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "prompt_tokens": "promptTokens",
    "completion_tokens": "completionTokens",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type ChatCompletionsResponseUsage$Outbound = {
  prompt_tokens?: number | undefined;
  completion_tokens?: number | undefined;
  total_tokens?: number | undefined;
};

/** @internal */
export const ChatCompletionsResponseUsage$outboundSchema: z.ZodType<
  ChatCompletionsResponseUsage$Outbound,
  z.ZodTypeDef,
  ChatCompletionsResponseUsage
> = z.object({
  promptTokens: z.number().int().optional(),
  completionTokens: z.number().int().optional(),
  totalTokens: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionsResponseUsage$ {
  /** @deprecated use `ChatCompletionsResponseUsage$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionsResponseUsage$inboundSchema;
  /** @deprecated use `ChatCompletionsResponseUsage$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionsResponseUsage$outboundSchema;
  /** @deprecated use `ChatCompletionsResponseUsage$Outbound` instead. */
  export type Outbound = ChatCompletionsResponseUsage$Outbound;
}

export function chatCompletionsResponseUsageToJSON(
  chatCompletionsResponseUsage: ChatCompletionsResponseUsage,
): string {
  return JSON.stringify(
    ChatCompletionsResponseUsage$outboundSchema.parse(
      chatCompletionsResponseUsage,
    ),
  );
}

export function chatCompletionsResponseUsageFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionsResponseUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionsResponseUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionsResponseUsage' from JSON`,
  );
}

/** @internal */
export const ChatCompletionsResponse$inboundSchema: z.ZodType<
  ChatCompletionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  object: z.string().optional(),
  created: z.number().int().optional(),
  model: z.string().optional(),
  choices: z.array(z.lazy(() => ChatCompletionsResponseChoice$inboundSchema))
    .optional(),
  usage: z.lazy(() => ChatCompletionsResponseUsage$inboundSchema).optional(),
  _metadata: Metadata$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_metadata": "metadata",
  });
});

/** @internal */
export type ChatCompletionsResponse$Outbound = {
  id?: string | undefined;
  object?: string | undefined;
  created?: number | undefined;
  model?: string | undefined;
  choices?: Array<ChatCompletionsResponseChoice$Outbound> | undefined;
  usage?: ChatCompletionsResponseUsage$Outbound | undefined;
  _metadata?: Metadata$Outbound | undefined;
};

/** @internal */
export const ChatCompletionsResponse$outboundSchema: z.ZodType<
  ChatCompletionsResponse$Outbound,
  z.ZodTypeDef,
  ChatCompletionsResponse
> = z.object({
  id: z.string().optional(),
  object: z.string().optional(),
  created: z.number().int().optional(),
  model: z.string().optional(),
  choices: z.array(z.lazy(() => ChatCompletionsResponseChoice$outboundSchema))
    .optional(),
  usage: z.lazy(() => ChatCompletionsResponseUsage$outboundSchema).optional(),
  metadata: Metadata$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    metadata: "_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionsResponse$ {
  /** @deprecated use `ChatCompletionsResponse$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionsResponse$inboundSchema;
  /** @deprecated use `ChatCompletionsResponse$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionsResponse$outboundSchema;
  /** @deprecated use `ChatCompletionsResponse$Outbound` instead. */
  export type Outbound = ChatCompletionsResponse$Outbound;
}

export function chatCompletionsResponseToJSON(
  chatCompletionsResponse: ChatCompletionsResponse,
): string {
  return JSON.stringify(
    ChatCompletionsResponse$outboundSchema.parse(chatCompletionsResponse),
  );
}

export function chatCompletionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionsResponse' from JSON`,
  );
}
