/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UsageRequest = {
  /**
   * Tanggal mulai (YYYY-MM-DD)
   */
  startDate?: RFCDate | undefined;
  /**
   * Tanggal akhir (YYYY-MM-DD)
   */
  endDate?: RFCDate | undefined;
};

/** @internal */
export const UsageRequest$inboundSchema: z.ZodType<
  UsageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.string().transform(v => new RFCDate(v)).optional(),
  end_date: z.string().transform(v => new RFCDate(v)).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type UsageRequest$Outbound = {
  start_date?: string | undefined;
  end_date?: string | undefined;
};

/** @internal */
export const UsageRequest$outboundSchema: z.ZodType<
  UsageRequest$Outbound,
  z.ZodTypeDef,
  UsageRequest
> = z.object({
  startDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  endDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsageRequest$ {
  /** @deprecated use `UsageRequest$inboundSchema` instead. */
  export const inboundSchema = UsageRequest$inboundSchema;
  /** @deprecated use `UsageRequest$outboundSchema` instead. */
  export const outboundSchema = UsageRequest$outboundSchema;
  /** @deprecated use `UsageRequest$Outbound` instead. */
  export type Outbound = UsageRequest$Outbound;
}

export function usageRequestToJSON(usageRequest: UsageRequest): string {
  return JSON.stringify(UsageRequest$outboundSchema.parse(usageRequest));
}

export function usageRequestFromJSON(
  jsonString: string,
): SafeParseResult<UsageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsageRequest' from JSON`,
  );
}
