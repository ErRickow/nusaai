/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * API Key status and usage info
 */
export type CheckApiKeyStatusResponseBody = {
  object?: string | undefined;
  organization?: string | undefined;
  permissions?: Array<string> | undefined;
  authorized?: boolean | undefined;
  created?: number | undefined;
  expires?: string | null | undefined;
  id?: string | undefined;
  tier?: string | undefined;
  usageInfo?: components.UsageInfo | undefined;
  metadata?: components.Metadata | undefined;
};

/** @internal */
export const CheckApiKeyStatusResponseBody$inboundSchema: z.ZodType<
  CheckApiKeyStatusResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: z.string().optional(),
  organization: z.string().optional(),
  permissions: z.array(z.string()).optional(),
  authorized: z.boolean().optional(),
  created: z.number().int().optional(),
  expires: z.nullable(z.string()).optional(),
  id: z.string().optional(),
  tier: z.string().optional(),
  usage_info: components.UsageInfo$inboundSchema.optional(),
  _metadata: components.Metadata$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "usage_info": "usageInfo",
    "_metadata": "metadata",
  });
});

/** @internal */
export type CheckApiKeyStatusResponseBody$Outbound = {
  object?: string | undefined;
  organization?: string | undefined;
  permissions?: Array<string> | undefined;
  authorized?: boolean | undefined;
  created?: number | undefined;
  expires?: string | null | undefined;
  id?: string | undefined;
  tier?: string | undefined;
  usage_info?: components.UsageInfo$Outbound | undefined;
  _metadata?: components.Metadata$Outbound | undefined;
};

/** @internal */
export const CheckApiKeyStatusResponseBody$outboundSchema: z.ZodType<
  CheckApiKeyStatusResponseBody$Outbound,
  z.ZodTypeDef,
  CheckApiKeyStatusResponseBody
> = z.object({
  object: z.string().optional(),
  organization: z.string().optional(),
  permissions: z.array(z.string()).optional(),
  authorized: z.boolean().optional(),
  created: z.number().int().optional(),
  expires: z.nullable(z.string()).optional(),
  id: z.string().optional(),
  tier: z.string().optional(),
  usageInfo: components.UsageInfo$outboundSchema.optional(),
  metadata: components.Metadata$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    usageInfo: "usage_info",
    metadata: "_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckApiKeyStatusResponseBody$ {
  /** @deprecated use `CheckApiKeyStatusResponseBody$inboundSchema` instead. */
  export const inboundSchema = CheckApiKeyStatusResponseBody$inboundSchema;
  /** @deprecated use `CheckApiKeyStatusResponseBody$outboundSchema` instead. */
  export const outboundSchema = CheckApiKeyStatusResponseBody$outboundSchema;
  /** @deprecated use `CheckApiKeyStatusResponseBody$Outbound` instead. */
  export type Outbound = CheckApiKeyStatusResponseBody$Outbound;
}

export function checkApiKeyStatusResponseBodyToJSON(
  checkApiKeyStatusResponseBody: CheckApiKeyStatusResponseBody,
): string {
  return JSON.stringify(
    CheckApiKeyStatusResponseBody$outboundSchema.parse(
      checkApiKeyStatusResponseBody,
    ),
  );
}

export function checkApiKeyStatusResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CheckApiKeyStatusResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckApiKeyStatusResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckApiKeyStatusResponseBody' from JSON`,
  );
}
