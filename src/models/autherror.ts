/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const Code = {
  MissingApiKey: "missing_api_key",
  InvalidApiKey: "invalid_api_key",
  ExpiredApiKey: "expired_api_key",
} as const;
export type Code = ClosedEnum<typeof Code>;

export type AuthErrorError = {
  message: string;
  type: string;
  code: Code;
};

/** @internal */
export const Code$inboundSchema: z.ZodNativeEnum<typeof Code> = z.nativeEnum(
  Code,
);

/** @internal */
export const Code$outboundSchema: z.ZodNativeEnum<typeof Code> =
  Code$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Code$ {
  /** @deprecated use `Code$inboundSchema` instead. */
  export const inboundSchema = Code$inboundSchema;
  /** @deprecated use `Code$outboundSchema` instead. */
  export const outboundSchema = Code$outboundSchema;
}

/** @internal */
export const AuthErrorError$inboundSchema: z.ZodType<
  AuthErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  type: z.string(),
  code: Code$inboundSchema,
});

/** @internal */
export type AuthErrorError$Outbound = {
  message: string;
  type: string;
  code: string;
};

/** @internal */
export const AuthErrorError$outboundSchema: z.ZodType<
  AuthErrorError$Outbound,
  z.ZodTypeDef,
  AuthErrorError
> = z.object({
  message: z.string(),
  type: z.string(),
  code: Code$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthErrorError$ {
  /** @deprecated use `AuthErrorError$inboundSchema` instead. */
  export const inboundSchema = AuthErrorError$inboundSchema;
  /** @deprecated use `AuthErrorError$outboundSchema` instead. */
  export const outboundSchema = AuthErrorError$outboundSchema;
  /** @deprecated use `AuthErrorError$Outbound` instead. */
  export type Outbound = AuthErrorError$Outbound;
}

export function authErrorErrorToJSON(authErrorError: AuthErrorError): string {
  return JSON.stringify(AuthErrorError$outboundSchema.parse(authErrorError));
}

export function authErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<AuthErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthErrorError' from JSON`,
  );
}
