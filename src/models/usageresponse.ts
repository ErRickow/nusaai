/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";

export type UsageResponseData = {
  /**
   * Unix timestamp
   */
  timestamp?: number | undefined;
  /**
   * Jumlah token yang digunakan
   */
  usage?: number | undefined;
  /**
   * Jumlah request
   */
  requests?: number | undefined;
  /**
   * Nama model
   */
  model?: string | undefined;
};

export type Limits = {
  requestsPerMinute?: number | undefined;
  requestsPerDay?: number | undefined;
  tokensPerMinute?: number | undefined;
  tokensPerDay?: number | undefined;
};

export type TierInfo = {
  currentTier?: string | undefined;
  limits?: Limits | undefined;
};

export type CurrentUsage = {
  requestsToday?: number | undefined;
  tokensToday?: number | undefined;
  requestsThisMinute?: number | undefined;
  tokensThisMinute?: number | undefined;
};

export type UsageResponse = {
  object?: string | undefined;
  data?: Array<UsageResponseData> | undefined;
  /**
   * Total penggunaan token
   */
  totalUsage?: number | undefined;
  /**
   * Total request
   */
  totalRequests?: number | undefined;
  tierInfo?: TierInfo | undefined;
  currentUsage?: CurrentUsage | undefined;
  /**
   * Metadata response dari NusantaraAI.
   */
  metadata?: Metadata | undefined;
};

/** @internal */
export const UsageResponseData$inboundSchema: z.ZodType<
  UsageResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  timestamp: z.number().int().optional(),
  usage: z.number().int().optional(),
  requests: z.number().int().optional(),
  model: z.string().optional(),
});

/** @internal */
export type UsageResponseData$Outbound = {
  timestamp?: number | undefined;
  usage?: number | undefined;
  requests?: number | undefined;
  model?: string | undefined;
};

/** @internal */
export const UsageResponseData$outboundSchema: z.ZodType<
  UsageResponseData$Outbound,
  z.ZodTypeDef,
  UsageResponseData
> = z.object({
  timestamp: z.number().int().optional(),
  usage: z.number().int().optional(),
  requests: z.number().int().optional(),
  model: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsageResponseData$ {
  /** @deprecated use `UsageResponseData$inboundSchema` instead. */
  export const inboundSchema = UsageResponseData$inboundSchema;
  /** @deprecated use `UsageResponseData$outboundSchema` instead. */
  export const outboundSchema = UsageResponseData$outboundSchema;
  /** @deprecated use `UsageResponseData$Outbound` instead. */
  export type Outbound = UsageResponseData$Outbound;
}

export function usageResponseDataToJSON(
  usageResponseData: UsageResponseData,
): string {
  return JSON.stringify(
    UsageResponseData$outboundSchema.parse(usageResponseData),
  );
}

export function usageResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<UsageResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsageResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsageResponseData' from JSON`,
  );
}

/** @internal */
export const Limits$inboundSchema: z.ZodType<Limits, z.ZodTypeDef, unknown> = z
  .object({
    requests_per_minute: z.number().int().optional(),
    requests_per_day: z.number().int().optional(),
    tokens_per_minute: z.number().int().optional(),
    tokens_per_day: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "requests_per_minute": "requestsPerMinute",
      "requests_per_day": "requestsPerDay",
      "tokens_per_minute": "tokensPerMinute",
      "tokens_per_day": "tokensPerDay",
    });
  });

/** @internal */
export type Limits$Outbound = {
  requests_per_minute?: number | undefined;
  requests_per_day?: number | undefined;
  tokens_per_minute?: number | undefined;
  tokens_per_day?: number | undefined;
};

/** @internal */
export const Limits$outboundSchema: z.ZodType<
  Limits$Outbound,
  z.ZodTypeDef,
  Limits
> = z.object({
  requestsPerMinute: z.number().int().optional(),
  requestsPerDay: z.number().int().optional(),
  tokensPerMinute: z.number().int().optional(),
  tokensPerDay: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    requestsPerMinute: "requests_per_minute",
    requestsPerDay: "requests_per_day",
    tokensPerMinute: "tokens_per_minute",
    tokensPerDay: "tokens_per_day",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Limits$ {
  /** @deprecated use `Limits$inboundSchema` instead. */
  export const inboundSchema = Limits$inboundSchema;
  /** @deprecated use `Limits$outboundSchema` instead. */
  export const outboundSchema = Limits$outboundSchema;
  /** @deprecated use `Limits$Outbound` instead. */
  export type Outbound = Limits$Outbound;
}

export function limitsToJSON(limits: Limits): string {
  return JSON.stringify(Limits$outboundSchema.parse(limits));
}

export function limitsFromJSON(
  jsonString: string,
): SafeParseResult<Limits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Limits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Limits' from JSON`,
  );
}

/** @internal */
export const TierInfo$inboundSchema: z.ZodType<
  TierInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  current_tier: z.string().optional(),
  limits: z.lazy(() => Limits$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "current_tier": "currentTier",
  });
});

/** @internal */
export type TierInfo$Outbound = {
  current_tier?: string | undefined;
  limits?: Limits$Outbound | undefined;
};

/** @internal */
export const TierInfo$outboundSchema: z.ZodType<
  TierInfo$Outbound,
  z.ZodTypeDef,
  TierInfo
> = z.object({
  currentTier: z.string().optional(),
  limits: z.lazy(() => Limits$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    currentTier: "current_tier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TierInfo$ {
  /** @deprecated use `TierInfo$inboundSchema` instead. */
  export const inboundSchema = TierInfo$inboundSchema;
  /** @deprecated use `TierInfo$outboundSchema` instead. */
  export const outboundSchema = TierInfo$outboundSchema;
  /** @deprecated use `TierInfo$Outbound` instead. */
  export type Outbound = TierInfo$Outbound;
}

export function tierInfoToJSON(tierInfo: TierInfo): string {
  return JSON.stringify(TierInfo$outboundSchema.parse(tierInfo));
}

export function tierInfoFromJSON(
  jsonString: string,
): SafeParseResult<TierInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TierInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TierInfo' from JSON`,
  );
}

/** @internal */
export const CurrentUsage$inboundSchema: z.ZodType<
  CurrentUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  requests_today: z.number().int().optional(),
  tokens_today: z.number().int().optional(),
  requests_this_minute: z.number().int().optional(),
  tokens_this_minute: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "requests_today": "requestsToday",
    "tokens_today": "tokensToday",
    "requests_this_minute": "requestsThisMinute",
    "tokens_this_minute": "tokensThisMinute",
  });
});

/** @internal */
export type CurrentUsage$Outbound = {
  requests_today?: number | undefined;
  tokens_today?: number | undefined;
  requests_this_minute?: number | undefined;
  tokens_this_minute?: number | undefined;
};

/** @internal */
export const CurrentUsage$outboundSchema: z.ZodType<
  CurrentUsage$Outbound,
  z.ZodTypeDef,
  CurrentUsage
> = z.object({
  requestsToday: z.number().int().optional(),
  tokensToday: z.number().int().optional(),
  requestsThisMinute: z.number().int().optional(),
  tokensThisMinute: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    requestsToday: "requests_today",
    tokensToday: "tokens_today",
    requestsThisMinute: "requests_this_minute",
    tokensThisMinute: "tokens_this_minute",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrentUsage$ {
  /** @deprecated use `CurrentUsage$inboundSchema` instead. */
  export const inboundSchema = CurrentUsage$inboundSchema;
  /** @deprecated use `CurrentUsage$outboundSchema` instead. */
  export const outboundSchema = CurrentUsage$outboundSchema;
  /** @deprecated use `CurrentUsage$Outbound` instead. */
  export type Outbound = CurrentUsage$Outbound;
}

export function currentUsageToJSON(currentUsage: CurrentUsage): string {
  return JSON.stringify(CurrentUsage$outboundSchema.parse(currentUsage));
}

export function currentUsageFromJSON(
  jsonString: string,
): SafeParseResult<CurrentUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CurrentUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrentUsage' from JSON`,
  );
}

/** @internal */
export const UsageResponse$inboundSchema: z.ZodType<
  UsageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: z.string().optional(),
  data: z.array(z.lazy(() => UsageResponseData$inboundSchema)).optional(),
  total_usage: z.number().int().optional(),
  total_requests: z.number().int().optional(),
  tier_info: z.lazy(() => TierInfo$inboundSchema).optional(),
  current_usage: z.lazy(() => CurrentUsage$inboundSchema).optional(),
  _metadata: Metadata$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "total_usage": "totalUsage",
    "total_requests": "totalRequests",
    "tier_info": "tierInfo",
    "current_usage": "currentUsage",
    "_metadata": "metadata",
  });
});

/** @internal */
export type UsageResponse$Outbound = {
  object?: string | undefined;
  data?: Array<UsageResponseData$Outbound> | undefined;
  total_usage?: number | undefined;
  total_requests?: number | undefined;
  tier_info?: TierInfo$Outbound | undefined;
  current_usage?: CurrentUsage$Outbound | undefined;
  _metadata?: Metadata$Outbound | undefined;
};

/** @internal */
export const UsageResponse$outboundSchema: z.ZodType<
  UsageResponse$Outbound,
  z.ZodTypeDef,
  UsageResponse
> = z.object({
  object: z.string().optional(),
  data: z.array(z.lazy(() => UsageResponseData$outboundSchema)).optional(),
  totalUsage: z.number().int().optional(),
  totalRequests: z.number().int().optional(),
  tierInfo: z.lazy(() => TierInfo$outboundSchema).optional(),
  currentUsage: z.lazy(() => CurrentUsage$outboundSchema).optional(),
  metadata: Metadata$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    totalUsage: "total_usage",
    totalRequests: "total_requests",
    tierInfo: "tier_info",
    currentUsage: "current_usage",
    metadata: "_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsageResponse$ {
  /** @deprecated use `UsageResponse$inboundSchema` instead. */
  export const inboundSchema = UsageResponse$inboundSchema;
  /** @deprecated use `UsageResponse$outboundSchema` instead. */
  export const outboundSchema = UsageResponse$outboundSchema;
  /** @deprecated use `UsageResponse$Outbound` instead. */
  export type Outbound = UsageResponse$Outbound;
}

export function usageResponseToJSON(usageResponse: UsageResponse): string {
  return JSON.stringify(UsageResponse$outboundSchema.parse(usageResponse));
}

export function usageResponseFromJSON(
  jsonString: string,
): SafeParseResult<UsageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsageResponse' from JSON`,
  );
}
