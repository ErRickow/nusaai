/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Type = {
  ImageUrl: "image_url",
} as const;
export type Type = ClosedEnum<typeof Type>;

export type ImageUrl = {
  url: string;
};

export type ImageMessage = {
  type: Type;
  imageUrl: ImageUrl;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const ImageUrl$inboundSchema: z.ZodType<
  ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
});

/** @internal */
export type ImageUrl$Outbound = {
  url: string;
};

/** @internal */
export const ImageUrl$outboundSchema: z.ZodType<
  ImageUrl$Outbound,
  z.ZodTypeDef,
  ImageUrl
> = z.object({
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImageUrl$ {
  /** @deprecated use `ImageUrl$inboundSchema` instead. */
  export const inboundSchema = ImageUrl$inboundSchema;
  /** @deprecated use `ImageUrl$outboundSchema` instead. */
  export const outboundSchema = ImageUrl$outboundSchema;
  /** @deprecated use `ImageUrl$Outbound` instead. */
  export type Outbound = ImageUrl$Outbound;
}

export function imageUrlToJSON(imageUrl: ImageUrl): string {
  return JSON.stringify(ImageUrl$outboundSchema.parse(imageUrl));
}

export function imageUrlFromJSON(
  jsonString: string,
): SafeParseResult<ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImageUrl' from JSON`,
  );
}

/** @internal */
export const ImageMessage$inboundSchema: z.ZodType<
  ImageMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: Type$inboundSchema,
  image_url: z.lazy(() => ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type ImageMessage$Outbound = {
  type: string;
  image_url: ImageUrl$Outbound;
};

/** @internal */
export const ImageMessage$outboundSchema: z.ZodType<
  ImageMessage$Outbound,
  z.ZodTypeDef,
  ImageMessage
> = z.object({
  type: Type$outboundSchema,
  imageUrl: z.lazy(() => ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImageMessage$ {
  /** @deprecated use `ImageMessage$inboundSchema` instead. */
  export const inboundSchema = ImageMessage$inboundSchema;
  /** @deprecated use `ImageMessage$outboundSchema` instead. */
  export const outboundSchema = ImageMessage$outboundSchema;
  /** @deprecated use `ImageMessage$Outbound` instead. */
  export type Outbound = ImageMessage$Outbound;
}

export function imageMessageToJSON(imageMessage: ImageMessage): string {
  return JSON.stringify(ImageMessage$outboundSchema.parse(imageMessage));
}

export function imageMessageFromJSON(
  jsonString: string,
): SafeParseResult<ImageMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImageMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImageMessage' from JSON`,
  );
}
