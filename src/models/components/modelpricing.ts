/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ModelPricing = {
  inputTokens?: number | undefined;
  outputTokens?: number | undefined;
  currency?: string | undefined;
};

/** @internal */
export const ModelPricing$inboundSchema: z.ZodType<
  ModelPricing,
  z.ZodTypeDef,
  unknown
> = z.object({
  input_tokens: z.number().optional(),
  output_tokens: z.number().optional(),
  currency: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "input_tokens": "inputTokens",
    "output_tokens": "outputTokens",
  });
});

/** @internal */
export type ModelPricing$Outbound = {
  input_tokens?: number | undefined;
  output_tokens?: number | undefined;
  currency?: string | undefined;
};

/** @internal */
export const ModelPricing$outboundSchema: z.ZodType<
  ModelPricing$Outbound,
  z.ZodTypeDef,
  ModelPricing
> = z.object({
  inputTokens: z.number().optional(),
  outputTokens: z.number().optional(),
  currency: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    inputTokens: "input_tokens",
    outputTokens: "output_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelPricing$ {
  /** @deprecated use `ModelPricing$inboundSchema` instead. */
  export const inboundSchema = ModelPricing$inboundSchema;
  /** @deprecated use `ModelPricing$outboundSchema` instead. */
  export const outboundSchema = ModelPricing$outboundSchema;
  /** @deprecated use `ModelPricing$Outbound` instead. */
  export type Outbound = ModelPricing$Outbound;
}

export function modelPricingToJSON(modelPricing: ModelPricing): string {
  return JSON.stringify(ModelPricing$outboundSchema.parse(modelPricing));
}

export function modelPricingFromJSON(
  jsonString: string,
): SafeParseResult<ModelPricing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelPricing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelPricing' from JSON`,
  );
}
