/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UsageInfo,
  UsageInfo$inboundSchema,
  UsageInfo$Outbound,
  UsageInfo$outboundSchema,
} from "./usageinfo.js";

export type Metadata = {
  creator?: string | undefined;
  status?: boolean | undefined;
  timestamp?: Date | undefined;
  requestId?: string | null | undefined;
  processingTime?: number | null | undefined;
  tier?: string | null | undefined;
  userTotalUsage?: UsageInfo | undefined;
  keySpecificUsage?: UsageInfo | undefined;
  isKeyDowngraded?: boolean | null | undefined;
  upstashRateLimitingActive?: boolean | null | undefined;
};

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  creator: z.string().optional(),
  status: z.boolean().optional(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  request_id: z.nullable(z.string()).optional(),
  processing_time: z.nullable(z.number()).optional(),
  tier: z.nullable(z.string()).optional(),
  user_total_usage: UsageInfo$inboundSchema.optional(),
  key_specific_usage: UsageInfo$inboundSchema.optional(),
  is_key_downgraded: z.nullable(z.boolean()).optional(),
  upstash_rate_limiting_active: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
    "processing_time": "processingTime",
    "user_total_usage": "userTotalUsage",
    "key_specific_usage": "keySpecificUsage",
    "is_key_downgraded": "isKeyDowngraded",
    "upstash_rate_limiting_active": "upstashRateLimitingActive",
  });
});

/** @internal */
export type Metadata$Outbound = {
  creator?: string | undefined;
  status?: boolean | undefined;
  timestamp?: string | undefined;
  request_id?: string | null | undefined;
  processing_time?: number | null | undefined;
  tier?: string | null | undefined;
  user_total_usage?: UsageInfo$Outbound | undefined;
  key_specific_usage?: UsageInfo$Outbound | undefined;
  is_key_downgraded?: boolean | null | undefined;
  upstash_rate_limiting_active?: boolean | null | undefined;
};

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.object({
  creator: z.string().optional(),
  status: z.boolean().optional(),
  timestamp: z.date().transform(v => v.toISOString()).optional(),
  requestId: z.nullable(z.string()).optional(),
  processingTime: z.nullable(z.number()).optional(),
  tier: z.nullable(z.string()).optional(),
  userTotalUsage: UsageInfo$outboundSchema.optional(),
  keySpecificUsage: UsageInfo$outboundSchema.optional(),
  isKeyDowngraded: z.nullable(z.boolean()).optional(),
  upstashRateLimitingActive: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
    processingTime: "processing_time",
    userTotalUsage: "user_total_usage",
    keySpecificUsage: "key_specific_usage",
    isKeyDowngraded: "is_key_downgraded",
    upstashRateLimitingActive: "upstash_rate_limiting_active",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

export function metadataToJSON(metadata: Metadata): string {
  return JSON.stringify(Metadata$outboundSchema.parse(metadata));
}

export function metadataFromJSON(
  jsonString: string,
): SafeParseResult<Metadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metadata' from JSON`,
  );
}
