/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ChatMessageRole = {
  System: "system",
  User: "user",
  Assistant: "assistant",
  Tool: "tool",
} as const;
export type ChatMessageRole = ClosedEnum<typeof ChatMessageRole>;

export type ChatMessage = {
  role: ChatMessageRole;
  content: string;
  name?: string | undefined;
  toolCallId?: string | undefined;
};

/** @internal */
export const ChatMessageRole$inboundSchema: z.ZodNativeEnum<
  typeof ChatMessageRole
> = z.nativeEnum(ChatMessageRole);

/** @internal */
export const ChatMessageRole$outboundSchema: z.ZodNativeEnum<
  typeof ChatMessageRole
> = ChatMessageRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatMessageRole$ {
  /** @deprecated use `ChatMessageRole$inboundSchema` instead. */
  export const inboundSchema = ChatMessageRole$inboundSchema;
  /** @deprecated use `ChatMessageRole$outboundSchema` instead. */
  export const outboundSchema = ChatMessageRole$outboundSchema;
}

/** @internal */
export const ChatMessage$inboundSchema: z.ZodType<
  ChatMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: ChatMessageRole$inboundSchema,
  content: z.string(),
  name: z.string().optional(),
  tool_call_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_call_id": "toolCallId",
  });
});

/** @internal */
export type ChatMessage$Outbound = {
  role: string;
  content: string;
  name?: string | undefined;
  tool_call_id?: string | undefined;
};

/** @internal */
export const ChatMessage$outboundSchema: z.ZodType<
  ChatMessage$Outbound,
  z.ZodTypeDef,
  ChatMessage
> = z.object({
  role: ChatMessageRole$outboundSchema,
  content: z.string(),
  name: z.string().optional(),
  toolCallId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolCallId: "tool_call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatMessage$ {
  /** @deprecated use `ChatMessage$inboundSchema` instead. */
  export const inboundSchema = ChatMessage$inboundSchema;
  /** @deprecated use `ChatMessage$outboundSchema` instead. */
  export const outboundSchema = ChatMessage$outboundSchema;
  /** @deprecated use `ChatMessage$Outbound` instead. */
  export type Outbound = ChatMessage$Outbound;
}

export function chatMessageToJSON(chatMessage: ChatMessage): string {
  return JSON.stringify(ChatMessage$outboundSchema.parse(chatMessage));
}

export function chatMessageFromJSON(
  jsonString: string,
): SafeParseResult<ChatMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatMessage' from JSON`,
  );
}
