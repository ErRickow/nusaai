/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";
import {
  ModerationResult,
  ModerationResult$inboundSchema,
  ModerationResult$Outbound,
  ModerationResult$outboundSchema,
} from "./moderationresult.js";

export type ModerationsResponse = {
  id?: string | undefined;
  model?: string | undefined;
  results?: Array<ModerationResult> | undefined;
  metadata?: Metadata | undefined;
};

/** @internal */
export const ModerationsResponse$inboundSchema: z.ZodType<
  ModerationsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  model: z.string().optional(),
  results: z.array(ModerationResult$inboundSchema).optional(),
  _metadata: Metadata$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_metadata": "metadata",
  });
});

/** @internal */
export type ModerationsResponse$Outbound = {
  id?: string | undefined;
  model?: string | undefined;
  results?: Array<ModerationResult$Outbound> | undefined;
  _metadata?: Metadata$Outbound | undefined;
};

/** @internal */
export const ModerationsResponse$outboundSchema: z.ZodType<
  ModerationsResponse$Outbound,
  z.ZodTypeDef,
  ModerationsResponse
> = z.object({
  id: z.string().optional(),
  model: z.string().optional(),
  results: z.array(ModerationResult$outboundSchema).optional(),
  metadata: Metadata$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    metadata: "_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModerationsResponse$ {
  /** @deprecated use `ModerationsResponse$inboundSchema` instead. */
  export const inboundSchema = ModerationsResponse$inboundSchema;
  /** @deprecated use `ModerationsResponse$outboundSchema` instead. */
  export const outboundSchema = ModerationsResponse$outboundSchema;
  /** @deprecated use `ModerationsResponse$Outbound` instead. */
  export type Outbound = ModerationsResponse$Outbound;
}

export function moderationsResponseToJSON(
  moderationsResponse: ModerationsResponse,
): string {
  return JSON.stringify(
    ModerationsResponse$outboundSchema.parse(moderationsResponse),
  );
}

export function moderationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ModerationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModerationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModerationsResponse' from JSON`,
  );
}
