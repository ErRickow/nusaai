/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ToolChoiceType = {
  Function: "function",
} as const;
export type ToolChoiceType = ClosedEnum<typeof ToolChoiceType>;

export type ToolChoiceFunction = {
  name: string;
};

export type ToolChoice = {
  type: ToolChoiceType;
  function: ToolChoiceFunction;
};

/** @internal */
export const ToolChoiceType$inboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceType
> = z.nativeEnum(ToolChoiceType);

/** @internal */
export const ToolChoiceType$outboundSchema: z.ZodNativeEnum<
  typeof ToolChoiceType
> = ToolChoiceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceType$ {
  /** @deprecated use `ToolChoiceType$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceType$inboundSchema;
  /** @deprecated use `ToolChoiceType$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceType$outboundSchema;
}

/** @internal */
export const ToolChoiceFunction$inboundSchema: z.ZodType<
  ToolChoiceFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type ToolChoiceFunction$Outbound = {
  name: string;
};

/** @internal */
export const ToolChoiceFunction$outboundSchema: z.ZodType<
  ToolChoiceFunction$Outbound,
  z.ZodTypeDef,
  ToolChoiceFunction
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoiceFunction$ {
  /** @deprecated use `ToolChoiceFunction$inboundSchema` instead. */
  export const inboundSchema = ToolChoiceFunction$inboundSchema;
  /** @deprecated use `ToolChoiceFunction$outboundSchema` instead. */
  export const outboundSchema = ToolChoiceFunction$outboundSchema;
  /** @deprecated use `ToolChoiceFunction$Outbound` instead. */
  export type Outbound = ToolChoiceFunction$Outbound;
}

export function toolChoiceFunctionToJSON(
  toolChoiceFunction: ToolChoiceFunction,
): string {
  return JSON.stringify(
    ToolChoiceFunction$outboundSchema.parse(toolChoiceFunction),
  );
}

export function toolChoiceFunctionFromJSON(
  jsonString: string,
): SafeParseResult<ToolChoiceFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolChoiceFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolChoiceFunction' from JSON`,
  );
}

/** @internal */
export const ToolChoice$inboundSchema: z.ZodType<
  ToolChoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ToolChoiceType$inboundSchema,
  function: z.lazy(() => ToolChoiceFunction$inboundSchema),
});

/** @internal */
export type ToolChoice$Outbound = {
  type: string;
  function: ToolChoiceFunction$Outbound;
};

/** @internal */
export const ToolChoice$outboundSchema: z.ZodType<
  ToolChoice$Outbound,
  z.ZodTypeDef,
  ToolChoice
> = z.object({
  type: ToolChoiceType$outboundSchema,
  function: z.lazy(() => ToolChoiceFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolChoice$ {
  /** @deprecated use `ToolChoice$inboundSchema` instead. */
  export const inboundSchema = ToolChoice$inboundSchema;
  /** @deprecated use `ToolChoice$outboundSchema` instead. */
  export const outboundSchema = ToolChoice$outboundSchema;
  /** @deprecated use `ToolChoice$Outbound` instead. */
  export type Outbound = ToolChoice$Outbound;
}

export function toolChoiceToJSON(toolChoice: ToolChoice): string {
  return JSON.stringify(ToolChoice$outboundSchema.parse(toolChoice));
}

export function toolChoiceFromJSON(
  jsonString: string,
): SafeParseResult<ToolChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolChoice' from JSON`,
  );
}
