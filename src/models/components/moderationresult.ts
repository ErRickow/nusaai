/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Categories = {
  hate?: boolean | undefined;
  hateThreatening?: boolean | undefined;
  harassment?: boolean | undefined;
  harassmentThreatening?: boolean | undefined;
  selfHarm?: boolean | undefined;
  selfHarmIntent?: boolean | undefined;
  selfHarmInstructions?: boolean | undefined;
  sexual?: boolean | undefined;
  sexualMinors?: boolean | undefined;
  violence?: boolean | undefined;
  violenceGraphic?: boolean | undefined;
  profanity?: boolean | undefined;
};

export type CategoryScores = {
  hate?: number | undefined;
  hateThreatening?: number | undefined;
  harassment?: number | undefined;
  harassmentThreatening?: number | undefined;
  selfHarm?: number | undefined;
  selfHarmIntent?: number | undefined;
  selfHarmInstructions?: number | undefined;
  sexual?: number | undefined;
  sexualMinors?: number | undefined;
  violence?: number | undefined;
  violenceGraphic?: number | undefined;
  profanity?: number | undefined;
};

export type ModerationResult = {
  flagged?: boolean | undefined;
  categories?: Categories | undefined;
  categoryScores?: CategoryScores | undefined;
};

/** @internal */
export const Categories$inboundSchema: z.ZodType<
  Categories,
  z.ZodTypeDef,
  unknown
> = z.object({
  hate: z.boolean().optional(),
  "hate/threatening": z.boolean().optional(),
  harassment: z.boolean().optional(),
  "harassment/threatening": z.boolean().optional(),
  "self-harm": z.boolean().optional(),
  "self-harm/intent": z.boolean().optional(),
  "self-harm/instructions": z.boolean().optional(),
  sexual: z.boolean().optional(),
  "sexual/minors": z.boolean().optional(),
  violence: z.boolean().optional(),
  "violence/graphic": z.boolean().optional(),
  profanity: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "hate/threatening": "hateThreatening",
    "harassment/threatening": "harassmentThreatening",
    "self-harm": "selfHarm",
    "self-harm/intent": "selfHarmIntent",
    "self-harm/instructions": "selfHarmInstructions",
    "sexual/minors": "sexualMinors",
    "violence/graphic": "violenceGraphic",
  });
});

/** @internal */
export type Categories$Outbound = {
  hate?: boolean | undefined;
  "hate/threatening"?: boolean | undefined;
  harassment?: boolean | undefined;
  "harassment/threatening"?: boolean | undefined;
  "self-harm"?: boolean | undefined;
  "self-harm/intent"?: boolean | undefined;
  "self-harm/instructions"?: boolean | undefined;
  sexual?: boolean | undefined;
  "sexual/minors"?: boolean | undefined;
  violence?: boolean | undefined;
  "violence/graphic"?: boolean | undefined;
  profanity?: boolean | undefined;
};

/** @internal */
export const Categories$outboundSchema: z.ZodType<
  Categories$Outbound,
  z.ZodTypeDef,
  Categories
> = z.object({
  hate: z.boolean().optional(),
  hateThreatening: z.boolean().optional(),
  harassment: z.boolean().optional(),
  harassmentThreatening: z.boolean().optional(),
  selfHarm: z.boolean().optional(),
  selfHarmIntent: z.boolean().optional(),
  selfHarmInstructions: z.boolean().optional(),
  sexual: z.boolean().optional(),
  sexualMinors: z.boolean().optional(),
  violence: z.boolean().optional(),
  violenceGraphic: z.boolean().optional(),
  profanity: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    hateThreatening: "hate/threatening",
    harassmentThreatening: "harassment/threatening",
    selfHarm: "self-harm",
    selfHarmIntent: "self-harm/intent",
    selfHarmInstructions: "self-harm/instructions",
    sexualMinors: "sexual/minors",
    violenceGraphic: "violence/graphic",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Categories$ {
  /** @deprecated use `Categories$inboundSchema` instead. */
  export const inboundSchema = Categories$inboundSchema;
  /** @deprecated use `Categories$outboundSchema` instead. */
  export const outboundSchema = Categories$outboundSchema;
  /** @deprecated use `Categories$Outbound` instead. */
  export type Outbound = Categories$Outbound;
}

export function categoriesToJSON(categories: Categories): string {
  return JSON.stringify(Categories$outboundSchema.parse(categories));
}

export function categoriesFromJSON(
  jsonString: string,
): SafeParseResult<Categories, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Categories$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Categories' from JSON`,
  );
}

/** @internal */
export const CategoryScores$inboundSchema: z.ZodType<
  CategoryScores,
  z.ZodTypeDef,
  unknown
> = z.object({
  hate: z.number().optional(),
  "hate/threatening": z.number().optional(),
  harassment: z.number().optional(),
  "harassment/threatening": z.number().optional(),
  "self-harm": z.number().optional(),
  "self-harm/intent": z.number().optional(),
  "self-harm/instructions": z.number().optional(),
  sexual: z.number().optional(),
  "sexual/minors": z.number().optional(),
  violence: z.number().optional(),
  "violence/graphic": z.number().optional(),
  profanity: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "hate/threatening": "hateThreatening",
    "harassment/threatening": "harassmentThreatening",
    "self-harm": "selfHarm",
    "self-harm/intent": "selfHarmIntent",
    "self-harm/instructions": "selfHarmInstructions",
    "sexual/minors": "sexualMinors",
    "violence/graphic": "violenceGraphic",
  });
});

/** @internal */
export type CategoryScores$Outbound = {
  hate?: number | undefined;
  "hate/threatening"?: number | undefined;
  harassment?: number | undefined;
  "harassment/threatening"?: number | undefined;
  "self-harm"?: number | undefined;
  "self-harm/intent"?: number | undefined;
  "self-harm/instructions"?: number | undefined;
  sexual?: number | undefined;
  "sexual/minors"?: number | undefined;
  violence?: number | undefined;
  "violence/graphic"?: number | undefined;
  profanity?: number | undefined;
};

/** @internal */
export const CategoryScores$outboundSchema: z.ZodType<
  CategoryScores$Outbound,
  z.ZodTypeDef,
  CategoryScores
> = z.object({
  hate: z.number().optional(),
  hateThreatening: z.number().optional(),
  harassment: z.number().optional(),
  harassmentThreatening: z.number().optional(),
  selfHarm: z.number().optional(),
  selfHarmIntent: z.number().optional(),
  selfHarmInstructions: z.number().optional(),
  sexual: z.number().optional(),
  sexualMinors: z.number().optional(),
  violence: z.number().optional(),
  violenceGraphic: z.number().optional(),
  profanity: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    hateThreatening: "hate/threatening",
    harassmentThreatening: "harassment/threatening",
    selfHarm: "self-harm",
    selfHarmIntent: "self-harm/intent",
    selfHarmInstructions: "self-harm/instructions",
    sexualMinors: "sexual/minors",
    violenceGraphic: "violence/graphic",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CategoryScores$ {
  /** @deprecated use `CategoryScores$inboundSchema` instead. */
  export const inboundSchema = CategoryScores$inboundSchema;
  /** @deprecated use `CategoryScores$outboundSchema` instead. */
  export const outboundSchema = CategoryScores$outboundSchema;
  /** @deprecated use `CategoryScores$Outbound` instead. */
  export type Outbound = CategoryScores$Outbound;
}

export function categoryScoresToJSON(categoryScores: CategoryScores): string {
  return JSON.stringify(CategoryScores$outboundSchema.parse(categoryScores));
}

export function categoryScoresFromJSON(
  jsonString: string,
): SafeParseResult<CategoryScores, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CategoryScores$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CategoryScores' from JSON`,
  );
}

/** @internal */
export const ModerationResult$inboundSchema: z.ZodType<
  ModerationResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  flagged: z.boolean().optional(),
  categories: z.lazy(() => Categories$inboundSchema).optional(),
  category_scores: z.lazy(() => CategoryScores$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "category_scores": "categoryScores",
  });
});

/** @internal */
export type ModerationResult$Outbound = {
  flagged?: boolean | undefined;
  categories?: Categories$Outbound | undefined;
  category_scores?: CategoryScores$Outbound | undefined;
};

/** @internal */
export const ModerationResult$outboundSchema: z.ZodType<
  ModerationResult$Outbound,
  z.ZodTypeDef,
  ModerationResult
> = z.object({
  flagged: z.boolean().optional(),
  categories: z.lazy(() => Categories$outboundSchema).optional(),
  categoryScores: z.lazy(() => CategoryScores$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    categoryScores: "category_scores",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModerationResult$ {
  /** @deprecated use `ModerationResult$inboundSchema` instead. */
  export const inboundSchema = ModerationResult$inboundSchema;
  /** @deprecated use `ModerationResult$outboundSchema` instead. */
  export const outboundSchema = ModerationResult$outboundSchema;
  /** @deprecated use `ModerationResult$Outbound` instead. */
  export type Outbound = ModerationResult$Outbound;
}

export function moderationResultToJSON(
  moderationResult: ModerationResult,
): string {
  return JSON.stringify(
    ModerationResult$outboundSchema.parse(moderationResult),
  );
}

export function moderationResultFromJSON(
  jsonString: string,
): SafeParseResult<ModerationResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModerationResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModerationResult' from JSON`,
  );
}
