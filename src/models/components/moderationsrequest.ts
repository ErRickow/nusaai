/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ModerationsRequestInput = string | Array<string>;

export type ModerationsRequest = {
  input: string | Array<string>;
  model?: string | undefined;
};

/** @internal */
export const ModerationsRequestInput$inboundSchema: z.ZodType<
  ModerationsRequestInput,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type ModerationsRequestInput$Outbound = string | Array<string>;

/** @internal */
export const ModerationsRequestInput$outboundSchema: z.ZodType<
  ModerationsRequestInput$Outbound,
  z.ZodTypeDef,
  ModerationsRequestInput
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModerationsRequestInput$ {
  /** @deprecated use `ModerationsRequestInput$inboundSchema` instead. */
  export const inboundSchema = ModerationsRequestInput$inboundSchema;
  /** @deprecated use `ModerationsRequestInput$outboundSchema` instead. */
  export const outboundSchema = ModerationsRequestInput$outboundSchema;
  /** @deprecated use `ModerationsRequestInput$Outbound` instead. */
  export type Outbound = ModerationsRequestInput$Outbound;
}

export function moderationsRequestInputToJSON(
  moderationsRequestInput: ModerationsRequestInput,
): string {
  return JSON.stringify(
    ModerationsRequestInput$outboundSchema.parse(moderationsRequestInput),
  );
}

export function moderationsRequestInputFromJSON(
  jsonString: string,
): SafeParseResult<ModerationsRequestInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModerationsRequestInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModerationsRequestInput' from JSON`,
  );
}

/** @internal */
export const ModerationsRequest$inboundSchema: z.ZodType<
  ModerationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  input: z.union([z.string(), z.array(z.string())]),
  model: z.string().optional(),
});

/** @internal */
export type ModerationsRequest$Outbound = {
  input: string | Array<string>;
  model?: string | undefined;
};

/** @internal */
export const ModerationsRequest$outboundSchema: z.ZodType<
  ModerationsRequest$Outbound,
  z.ZodTypeDef,
  ModerationsRequest
> = z.object({
  input: z.union([z.string(), z.array(z.string())]),
  model: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModerationsRequest$ {
  /** @deprecated use `ModerationsRequest$inboundSchema` instead. */
  export const inboundSchema = ModerationsRequest$inboundSchema;
  /** @deprecated use `ModerationsRequest$outboundSchema` instead. */
  export const outboundSchema = ModerationsRequest$outboundSchema;
  /** @deprecated use `ModerationsRequest$Outbound` instead. */
  export type Outbound = ModerationsRequest$Outbound;
}

export function moderationsRequestToJSON(
  moderationsRequest: ModerationsRequest,
): string {
  return JSON.stringify(
    ModerationsRequest$outboundSchema.parse(moderationsRequest),
  );
}

export function moderationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ModerationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModerationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModerationsRequest' from JSON`,
  );
}
