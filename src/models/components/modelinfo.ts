/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ModelPricing,
  ModelPricing$inboundSchema,
  ModelPricing$Outbound,
  ModelPricing$outboundSchema,
} from "./modelpricing.js";

export type Permission = {};

export type ModelInfo = {
  id?: string | undefined;
  object?: string | undefined;
  created?: number | undefined;
  ownedBy?: string | undefined;
  permission?: Array<Permission> | undefined;
  root?: string | undefined;
  parent?: string | null | undefined;
  description?: string | undefined;
  capabilities?: Array<string> | undefined;
  maxTokens?: number | undefined;
  pricing?: ModelPricing | undefined;
};

/** @internal */
export const Permission$inboundSchema: z.ZodType<
  Permission,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Permission$Outbound = {};

/** @internal */
export const Permission$outboundSchema: z.ZodType<
  Permission$Outbound,
  z.ZodTypeDef,
  Permission
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Permission$ {
  /** @deprecated use `Permission$inboundSchema` instead. */
  export const inboundSchema = Permission$inboundSchema;
  /** @deprecated use `Permission$outboundSchema` instead. */
  export const outboundSchema = Permission$outboundSchema;
  /** @deprecated use `Permission$Outbound` instead. */
  export type Outbound = Permission$Outbound;
}

export function permissionToJSON(permission: Permission): string {
  return JSON.stringify(Permission$outboundSchema.parse(permission));
}

export function permissionFromJSON(
  jsonString: string,
): SafeParseResult<Permission, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Permission$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Permission' from JSON`,
  );
}

/** @internal */
export const ModelInfo$inboundSchema: z.ZodType<
  ModelInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  object: z.string().optional(),
  created: z.number().int().optional(),
  owned_by: z.string().optional(),
  permission: z.array(z.lazy(() => Permission$inboundSchema)).optional(),
  root: z.string().optional(),
  parent: z.nullable(z.string()).optional(),
  description: z.string().optional(),
  capabilities: z.array(z.string()).optional(),
  max_tokens: z.number().int().optional(),
  pricing: ModelPricing$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "owned_by": "ownedBy",
    "max_tokens": "maxTokens",
  });
});

/** @internal */
export type ModelInfo$Outbound = {
  id?: string | undefined;
  object?: string | undefined;
  created?: number | undefined;
  owned_by?: string | undefined;
  permission?: Array<Permission$Outbound> | undefined;
  root?: string | undefined;
  parent?: string | null | undefined;
  description?: string | undefined;
  capabilities?: Array<string> | undefined;
  max_tokens?: number | undefined;
  pricing?: ModelPricing$Outbound | undefined;
};

/** @internal */
export const ModelInfo$outboundSchema: z.ZodType<
  ModelInfo$Outbound,
  z.ZodTypeDef,
  ModelInfo
> = z.object({
  id: z.string().optional(),
  object: z.string().optional(),
  created: z.number().int().optional(),
  ownedBy: z.string().optional(),
  permission: z.array(z.lazy(() => Permission$outboundSchema)).optional(),
  root: z.string().optional(),
  parent: z.nullable(z.string()).optional(),
  description: z.string().optional(),
  capabilities: z.array(z.string()).optional(),
  maxTokens: z.number().int().optional(),
  pricing: ModelPricing$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    ownedBy: "owned_by",
    maxTokens: "max_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelInfo$ {
  /** @deprecated use `ModelInfo$inboundSchema` instead. */
  export const inboundSchema = ModelInfo$inboundSchema;
  /** @deprecated use `ModelInfo$outboundSchema` instead. */
  export const outboundSchema = ModelInfo$outboundSchema;
  /** @deprecated use `ModelInfo$Outbound` instead. */
  export type Outbound = ModelInfo$Outbound;
}

export function modelInfoToJSON(modelInfo: ModelInfo): string {
  return JSON.stringify(ModelInfo$outboundSchema.parse(modelInfo));
}

export function modelInfoFromJSON(
  jsonString: string,
): SafeParseResult<ModelInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelInfo' from JSON`,
  );
}
