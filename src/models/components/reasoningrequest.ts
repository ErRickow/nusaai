/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChatMessage,
  ChatMessage$inboundSchema,
  ChatMessage$Outbound,
  ChatMessage$outboundSchema,
} from "./chatmessage.js";
import {
  ResponseFormat,
  ResponseFormat$inboundSchema,
  ResponseFormat$Outbound,
  ResponseFormat$outboundSchema,
} from "./responseformat.js";

export type ReasoningRequest = {
  model?: string | undefined;
  messages: Array<ChatMessage>;
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  stream?: boolean | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  responseFormat?: ResponseFormat | undefined;
};

/** @internal */
export const ReasoningRequest$inboundSchema: z.ZodType<
  ReasoningRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string().optional(),
  messages: z.array(ChatMessage$inboundSchema),
  temperature: z.number().default(0.7),
  max_tokens: z.number().int().default(1500),
  stream: z.boolean().default(false),
  top_p: z.number().default(1),
  frequency_penalty: z.number().default(0),
  presence_penalty: z.number().default(0),
  response_format: ResponseFormat$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "max_tokens": "maxTokens",
    "top_p": "topP",
    "frequency_penalty": "frequencyPenalty",
    "presence_penalty": "presencePenalty",
    "response_format": "responseFormat",
  });
});

/** @internal */
export type ReasoningRequest$Outbound = {
  model?: string | undefined;
  messages: Array<ChatMessage$Outbound>;
  temperature: number;
  max_tokens: number;
  stream: boolean;
  top_p: number;
  frequency_penalty: number;
  presence_penalty: number;
  response_format?: ResponseFormat$Outbound | undefined;
};

/** @internal */
export const ReasoningRequest$outboundSchema: z.ZodType<
  ReasoningRequest$Outbound,
  z.ZodTypeDef,
  ReasoningRequest
> = z.object({
  model: z.string().optional(),
  messages: z.array(ChatMessage$outboundSchema),
  temperature: z.number().default(0.7),
  maxTokens: z.number().int().default(1500),
  stream: z.boolean().default(false),
  topP: z.number().default(1),
  frequencyPenalty: z.number().default(0),
  presencePenalty: z.number().default(0),
  responseFormat: ResponseFormat$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    maxTokens: "max_tokens",
    topP: "top_p",
    frequencyPenalty: "frequency_penalty",
    presencePenalty: "presence_penalty",
    responseFormat: "response_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReasoningRequest$ {
  /** @deprecated use `ReasoningRequest$inboundSchema` instead. */
  export const inboundSchema = ReasoningRequest$inboundSchema;
  /** @deprecated use `ReasoningRequest$outboundSchema` instead. */
  export const outboundSchema = ReasoningRequest$outboundSchema;
  /** @deprecated use `ReasoningRequest$Outbound` instead. */
  export type Outbound = ReasoningRequest$Outbound;
}

export function reasoningRequestToJSON(
  reasoningRequest: ReasoningRequest,
): string {
  return JSON.stringify(
    ReasoningRequest$outboundSchema.parse(reasoningRequest),
  );
}

export function reasoningRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReasoningRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReasoningRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReasoningRequest' from JSON`,
  );
}
