/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ResponseFormatType = {
  Text: "text",
  JsonObject: "json_object",
} as const;
export type ResponseFormatType = ClosedEnum<typeof ResponseFormatType>;

export type ResponseFormat = {
  type?: ResponseFormatType | undefined;
};

/** @internal */
export const ResponseFormatType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseFormatType
> = z.nativeEnum(ResponseFormatType);

/** @internal */
export const ResponseFormatType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseFormatType
> = ResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormatType$ {
  /** @deprecated use `ResponseFormatType$inboundSchema` instead. */
  export const inboundSchema = ResponseFormatType$inboundSchema;
  /** @deprecated use `ResponseFormatType$outboundSchema` instead. */
  export const outboundSchema = ResponseFormatType$outboundSchema;
}

/** @internal */
export const ResponseFormat$inboundSchema: z.ZodType<
  ResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponseFormatType$inboundSchema.optional(),
});

/** @internal */
export type ResponseFormat$Outbound = {
  type?: string | undefined;
};

/** @internal */
export const ResponseFormat$outboundSchema: z.ZodType<
  ResponseFormat$Outbound,
  z.ZodTypeDef,
  ResponseFormat
> = z.object({
  type: ResponseFormatType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormat$ {
  /** @deprecated use `ResponseFormat$inboundSchema` instead. */
  export const inboundSchema = ResponseFormat$inboundSchema;
  /** @deprecated use `ResponseFormat$outboundSchema` instead. */
  export const outboundSchema = ResponseFormat$outboundSchema;
  /** @deprecated use `ResponseFormat$Outbound` instead. */
  export type Outbound = ResponseFormat$Outbound;
}

export function responseFormatToJSON(responseFormat: ResponseFormat): string {
  return JSON.stringify(ResponseFormat$outboundSchema.parse(responseFormat));
}

export function responseFormatFromJSON(
  jsonString: string,
): SafeParseResult<ResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseFormat' from JSON`,
  );
}
