/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";

export type System = {
  status?: string | undefined;
  version?: string | undefined;
  /**
   * Uptime dalam detik
   */
  uptime?: number | undefined;
  modelsAvailable?: Array<string> | undefined;
};

export type YourUsage = {
  requestsToday?: number | undefined;
  tokensToday?: number | undefined;
  remainingRequests?: number | undefined;
  remainingTokens?: number | undefined;
};

export type SystemStatusResponse = {
  system?: System | undefined;
  /**
   * Tier akun Anda
   */
  yourTier?: string | undefined;
  yourUsage?: YourUsage | undefined;
  /**
   * Metadata response dari NusantaraAI.
   */
  metadata?: Metadata | undefined;
};

/** @internal */
export const System$inboundSchema: z.ZodType<System, z.ZodTypeDef, unknown> = z
  .object({
    status: z.string().optional(),
    version: z.string().optional(),
    uptime: z.number().int().optional(),
    models_available: z.array(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "models_available": "modelsAvailable",
    });
  });

/** @internal */
export type System$Outbound = {
  status?: string | undefined;
  version?: string | undefined;
  uptime?: number | undefined;
  models_available?: Array<string> | undefined;
};

/** @internal */
export const System$outboundSchema: z.ZodType<
  System$Outbound,
  z.ZodTypeDef,
  System
> = z.object({
  status: z.string().optional(),
  version: z.string().optional(),
  uptime: z.number().int().optional(),
  modelsAvailable: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    modelsAvailable: "models_available",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace System$ {
  /** @deprecated use `System$inboundSchema` instead. */
  export const inboundSchema = System$inboundSchema;
  /** @deprecated use `System$outboundSchema` instead. */
  export const outboundSchema = System$outboundSchema;
  /** @deprecated use `System$Outbound` instead. */
  export type Outbound = System$Outbound;
}

export function systemToJSON(system: System): string {
  return JSON.stringify(System$outboundSchema.parse(system));
}

export function systemFromJSON(
  jsonString: string,
): SafeParseResult<System, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => System$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'System' from JSON`,
  );
}

/** @internal */
export const YourUsage$inboundSchema: z.ZodType<
  YourUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  requests_today: z.number().int().optional(),
  tokens_today: z.number().int().optional(),
  remaining_requests: z.number().int().optional(),
  remaining_tokens: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "requests_today": "requestsToday",
    "tokens_today": "tokensToday",
    "remaining_requests": "remainingRequests",
    "remaining_tokens": "remainingTokens",
  });
});

/** @internal */
export type YourUsage$Outbound = {
  requests_today?: number | undefined;
  tokens_today?: number | undefined;
  remaining_requests?: number | undefined;
  remaining_tokens?: number | undefined;
};

/** @internal */
export const YourUsage$outboundSchema: z.ZodType<
  YourUsage$Outbound,
  z.ZodTypeDef,
  YourUsage
> = z.object({
  requestsToday: z.number().int().optional(),
  tokensToday: z.number().int().optional(),
  remainingRequests: z.number().int().optional(),
  remainingTokens: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    requestsToday: "requests_today",
    tokensToday: "tokens_today",
    remainingRequests: "remaining_requests",
    remainingTokens: "remaining_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace YourUsage$ {
  /** @deprecated use `YourUsage$inboundSchema` instead. */
  export const inboundSchema = YourUsage$inboundSchema;
  /** @deprecated use `YourUsage$outboundSchema` instead. */
  export const outboundSchema = YourUsage$outboundSchema;
  /** @deprecated use `YourUsage$Outbound` instead. */
  export type Outbound = YourUsage$Outbound;
}

export function yourUsageToJSON(yourUsage: YourUsage): string {
  return JSON.stringify(YourUsage$outboundSchema.parse(yourUsage));
}

export function yourUsageFromJSON(
  jsonString: string,
): SafeParseResult<YourUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => YourUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'YourUsage' from JSON`,
  );
}

/** @internal */
export const SystemStatusResponse$inboundSchema: z.ZodType<
  SystemStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  system: z.lazy(() => System$inboundSchema).optional(),
  your_tier: z.string().optional(),
  your_usage: z.lazy(() => YourUsage$inboundSchema).optional(),
  _metadata: Metadata$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "your_tier": "yourTier",
    "your_usage": "yourUsage",
    "_metadata": "metadata",
  });
});

/** @internal */
export type SystemStatusResponse$Outbound = {
  system?: System$Outbound | undefined;
  your_tier?: string | undefined;
  your_usage?: YourUsage$Outbound | undefined;
  _metadata?: Metadata$Outbound | undefined;
};

/** @internal */
export const SystemStatusResponse$outboundSchema: z.ZodType<
  SystemStatusResponse$Outbound,
  z.ZodTypeDef,
  SystemStatusResponse
> = z.object({
  system: z.lazy(() => System$outboundSchema).optional(),
  yourTier: z.string().optional(),
  yourUsage: z.lazy(() => YourUsage$outboundSchema).optional(),
  metadata: Metadata$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    yourTier: "your_tier",
    yourUsage: "your_usage",
    metadata: "_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemStatusResponse$ {
  /** @deprecated use `SystemStatusResponse$inboundSchema` instead. */
  export const inboundSchema = SystemStatusResponse$inboundSchema;
  /** @deprecated use `SystemStatusResponse$outboundSchema` instead. */
  export const outboundSchema = SystemStatusResponse$outboundSchema;
  /** @deprecated use `SystemStatusResponse$Outbound` instead. */
  export type Outbound = SystemStatusResponse$Outbound;
}

export function systemStatusResponseToJSON(
  systemStatusResponse: SystemStatusResponse,
): string {
  return JSON.stringify(
    SystemStatusResponse$outboundSchema.parse(systemStatusResponse),
  );
}

export function systemStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<SystemStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemStatusResponse' from JSON`,
  );
}
