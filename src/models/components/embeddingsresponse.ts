/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EmbeddingObject,
  EmbeddingObject$inboundSchema,
  EmbeddingObject$Outbound,
  EmbeddingObject$outboundSchema,
} from "./embeddingobject.js";
import {
  EmbeddingUsage,
  EmbeddingUsage$inboundSchema,
  EmbeddingUsage$Outbound,
  EmbeddingUsage$outboundSchema,
} from "./embeddingusage.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";

export type EmbeddingsResponse = {
  object?: string | undefined;
  data?: Array<EmbeddingObject> | undefined;
  model?: string | undefined;
  usage?: EmbeddingUsage | undefined;
  metadata?: Metadata | undefined;
};

/** @internal */
export const EmbeddingsResponse$inboundSchema: z.ZodType<
  EmbeddingsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: z.string().optional(),
  data: z.array(EmbeddingObject$inboundSchema).optional(),
  model: z.string().optional(),
  usage: EmbeddingUsage$inboundSchema.optional(),
  _metadata: Metadata$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_metadata": "metadata",
  });
});

/** @internal */
export type EmbeddingsResponse$Outbound = {
  object?: string | undefined;
  data?: Array<EmbeddingObject$Outbound> | undefined;
  model?: string | undefined;
  usage?: EmbeddingUsage$Outbound | undefined;
  _metadata?: Metadata$Outbound | undefined;
};

/** @internal */
export const EmbeddingsResponse$outboundSchema: z.ZodType<
  EmbeddingsResponse$Outbound,
  z.ZodTypeDef,
  EmbeddingsResponse
> = z.object({
  object: z.string().optional(),
  data: z.array(EmbeddingObject$outboundSchema).optional(),
  model: z.string().optional(),
  usage: EmbeddingUsage$outboundSchema.optional(),
  metadata: Metadata$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    metadata: "_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbeddingsResponse$ {
  /** @deprecated use `EmbeddingsResponse$inboundSchema` instead. */
  export const inboundSchema = EmbeddingsResponse$inboundSchema;
  /** @deprecated use `EmbeddingsResponse$outboundSchema` instead. */
  export const outboundSchema = EmbeddingsResponse$outboundSchema;
  /** @deprecated use `EmbeddingsResponse$Outbound` instead. */
  export type Outbound = EmbeddingsResponse$Outbound;
}

export function embeddingsResponseToJSON(
  embeddingsResponse: EmbeddingsResponse,
): string {
  return JSON.stringify(
    EmbeddingsResponse$outboundSchema.parse(embeddingsResponse),
  );
}

export function embeddingsResponseFromJSON(
  jsonString: string,
): SafeParseResult<EmbeddingsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmbeddingsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmbeddingsResponse' from JSON`,
  );
}
