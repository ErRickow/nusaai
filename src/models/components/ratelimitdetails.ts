/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RateLimitDetails = {
  limit?: number | undefined;
  remaining?: number | undefined;
  reset?: Date | undefined;
  retryAfter?: number | null | undefined;
};

/** @internal */
export const RateLimitDetails$inboundSchema: z.ZodType<
  RateLimitDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().optional(),
  remaining: z.number().int().optional(),
  reset: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  retry_after: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "retry_after": "retryAfter",
  });
});

/** @internal */
export type RateLimitDetails$Outbound = {
  limit?: number | undefined;
  remaining?: number | undefined;
  reset?: string | undefined;
  retry_after?: number | null | undefined;
};

/** @internal */
export const RateLimitDetails$outboundSchema: z.ZodType<
  RateLimitDetails$Outbound,
  z.ZodTypeDef,
  RateLimitDetails
> = z.object({
  limit: z.number().int().optional(),
  remaining: z.number().int().optional(),
  reset: z.date().transform(v => v.toISOString()).optional(),
  retryAfter: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    retryAfter: "retry_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RateLimitDetails$ {
  /** @deprecated use `RateLimitDetails$inboundSchema` instead. */
  export const inboundSchema = RateLimitDetails$inboundSchema;
  /** @deprecated use `RateLimitDetails$outboundSchema` instead. */
  export const outboundSchema = RateLimitDetails$outboundSchema;
  /** @deprecated use `RateLimitDetails$Outbound` instead. */
  export type Outbound = RateLimitDetails$Outbound;
}

export function rateLimitDetailsToJSON(
  rateLimitDetails: RateLimitDetails,
): string {
  return JSON.stringify(
    RateLimitDetails$outboundSchema.parse(rateLimitDetails),
  );
}

export function rateLimitDetailsFromJSON(
  jsonString: string,
): SafeParseResult<RateLimitDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RateLimitDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RateLimitDetails' from JSON`,
  );
}
