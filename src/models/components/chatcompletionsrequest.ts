/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Role = {
  System: "system",
  User: "user",
  Assistant: "assistant",
} as const;
export type Role = ClosedEnum<typeof Role>;

export type Messages = {
  role: Role;
  content: string;
};

export const Type = {
  Text: "text",
  JsonObject: "json_object",
} as const;
export type Type = ClosedEnum<typeof Type>;

export type ResponseFormat = {
  type?: Type | undefined;
};

export type Functions = {};

export type Tools = {};

/**
 * Request untuk chat completion.
 */
export type ChatCompletionsRequest = {
  /**
   * Nama model (wajib).
   */
  model: string;
  /**
   * Array pesan (role+content).
   */
  messages: Array<Messages>;
  /**
   * Kontrol kreativitas response
   */
  temperature?: number | undefined;
  /**
   * Maksimal token output
   */
  maxTokens?: number | undefined;
  /**
   * Stream response
   */
  stream?: boolean | undefined;
  /**
   * Jumlah response yang dihasilkan
   */
  n?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  responseFormat?: ResponseFormat | undefined;
  /**
   * Fungsi yang tersedia untuk dipanggil
   */
  functions?: Array<Functions> | undefined;
  /**
   * Tools yang tersedia
   */
  tools?: Array<Tools> | undefined;
  /**
   * Cara pemilihan tool
   */
  toolChoice?: string | undefined;
  /**
   * Aktifkan web search
   */
  webSearch?: boolean | undefined;
};

/** @internal */
export const Role$inboundSchema: z.ZodNativeEnum<typeof Role> = z.nativeEnum(
  Role,
);

/** @internal */
export const Role$outboundSchema: z.ZodNativeEnum<typeof Role> =
  Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
}

/** @internal */
export const Messages$inboundSchema: z.ZodType<
  Messages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: Role$inboundSchema,
  content: z.string(),
});

/** @internal */
export type Messages$Outbound = {
  role: string;
  content: string;
};

/** @internal */
export const Messages$outboundSchema: z.ZodType<
  Messages$Outbound,
  z.ZodTypeDef,
  Messages
> = z.object({
  role: Role$outboundSchema,
  content: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Messages$ {
  /** @deprecated use `Messages$inboundSchema` instead. */
  export const inboundSchema = Messages$inboundSchema;
  /** @deprecated use `Messages$outboundSchema` instead. */
  export const outboundSchema = Messages$outboundSchema;
  /** @deprecated use `Messages$Outbound` instead. */
  export type Outbound = Messages$Outbound;
}

export function messagesToJSON(messages: Messages): string {
  return JSON.stringify(Messages$outboundSchema.parse(messages));
}

export function messagesFromJSON(
  jsonString: string,
): SafeParseResult<Messages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Messages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Messages' from JSON`,
  );
}

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const ResponseFormat$inboundSchema: z.ZodType<
  ResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: Type$inboundSchema.default("text"),
});

/** @internal */
export type ResponseFormat$Outbound = {
  type: string;
};

/** @internal */
export const ResponseFormat$outboundSchema: z.ZodType<
  ResponseFormat$Outbound,
  z.ZodTypeDef,
  ResponseFormat
> = z.object({
  type: Type$outboundSchema.default("text"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormat$ {
  /** @deprecated use `ResponseFormat$inboundSchema` instead. */
  export const inboundSchema = ResponseFormat$inboundSchema;
  /** @deprecated use `ResponseFormat$outboundSchema` instead. */
  export const outboundSchema = ResponseFormat$outboundSchema;
  /** @deprecated use `ResponseFormat$Outbound` instead. */
  export type Outbound = ResponseFormat$Outbound;
}

export function responseFormatToJSON(responseFormat: ResponseFormat): string {
  return JSON.stringify(ResponseFormat$outboundSchema.parse(responseFormat));
}

export function responseFormatFromJSON(
  jsonString: string,
): SafeParseResult<ResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseFormat' from JSON`,
  );
}

/** @internal */
export const Functions$inboundSchema: z.ZodType<
  Functions,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Functions$Outbound = {};

/** @internal */
export const Functions$outboundSchema: z.ZodType<
  Functions$Outbound,
  z.ZodTypeDef,
  Functions
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Functions$ {
  /** @deprecated use `Functions$inboundSchema` instead. */
  export const inboundSchema = Functions$inboundSchema;
  /** @deprecated use `Functions$outboundSchema` instead. */
  export const outboundSchema = Functions$outboundSchema;
  /** @deprecated use `Functions$Outbound` instead. */
  export type Outbound = Functions$Outbound;
}

export function functionsToJSON(functions: Functions): string {
  return JSON.stringify(Functions$outboundSchema.parse(functions));
}

export function functionsFromJSON(
  jsonString: string,
): SafeParseResult<Functions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Functions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Functions' from JSON`,
  );
}

/** @internal */
export const Tools$inboundSchema: z.ZodType<Tools, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Tools$Outbound = {};

/** @internal */
export const Tools$outboundSchema: z.ZodType<
  Tools$Outbound,
  z.ZodTypeDef,
  Tools
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tools$ {
  /** @deprecated use `Tools$inboundSchema` instead. */
  export const inboundSchema = Tools$inboundSchema;
  /** @deprecated use `Tools$outboundSchema` instead. */
  export const outboundSchema = Tools$outboundSchema;
  /** @deprecated use `Tools$Outbound` instead. */
  export type Outbound = Tools$Outbound;
}

export function toolsToJSON(tools: Tools): string {
  return JSON.stringify(Tools$outboundSchema.parse(tools));
}

export function toolsFromJSON(
  jsonString: string,
): SafeParseResult<Tools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tools' from JSON`,
  );
}

/** @internal */
export const ChatCompletionsRequest$inboundSchema: z.ZodType<
  ChatCompletionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
  messages: z.array(z.lazy(() => Messages$inboundSchema)),
  temperature: z.number().default(0.7),
  max_tokens: z.number().int().default(1000),
  stream: z.boolean().default(false),
  n: z.number().int().default(1),
  top_p: z.number().default(1),
  frequency_penalty: z.number().default(0),
  presence_penalty: z.number().default(0),
  response_format: z.lazy(() => ResponseFormat$inboundSchema).optional(),
  functions: z.array(z.lazy(() => Functions$inboundSchema)).optional(),
  tools: z.array(z.lazy(() => Tools$inboundSchema)).optional(),
  tool_choice: z.string().default("auto"),
  web_search: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "max_tokens": "maxTokens",
    "top_p": "topP",
    "frequency_penalty": "frequencyPenalty",
    "presence_penalty": "presencePenalty",
    "response_format": "responseFormat",
    "tool_choice": "toolChoice",
    "web_search": "webSearch",
  });
});

/** @internal */
export type ChatCompletionsRequest$Outbound = {
  model: string;
  messages: Array<Messages$Outbound>;
  temperature: number;
  max_tokens: number;
  stream: boolean;
  n: number;
  top_p: number;
  frequency_penalty: number;
  presence_penalty: number;
  response_format?: ResponseFormat$Outbound | undefined;
  functions?: Array<Functions$Outbound> | undefined;
  tools?: Array<Tools$Outbound> | undefined;
  tool_choice: string;
  web_search: boolean;
};

/** @internal */
export const ChatCompletionsRequest$outboundSchema: z.ZodType<
  ChatCompletionsRequest$Outbound,
  z.ZodTypeDef,
  ChatCompletionsRequest
> = z.object({
  model: z.string(),
  messages: z.array(z.lazy(() => Messages$outboundSchema)),
  temperature: z.number().default(0.7),
  maxTokens: z.number().int().default(1000),
  stream: z.boolean().default(false),
  n: z.number().int().default(1),
  topP: z.number().default(1),
  frequencyPenalty: z.number().default(0),
  presencePenalty: z.number().default(0),
  responseFormat: z.lazy(() => ResponseFormat$outboundSchema).optional(),
  functions: z.array(z.lazy(() => Functions$outboundSchema)).optional(),
  tools: z.array(z.lazy(() => Tools$outboundSchema)).optional(),
  toolChoice: z.string().default("auto"),
  webSearch: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    maxTokens: "max_tokens",
    topP: "top_p",
    frequencyPenalty: "frequency_penalty",
    presencePenalty: "presence_penalty",
    responseFormat: "response_format",
    toolChoice: "tool_choice",
    webSearch: "web_search",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionsRequest$ {
  /** @deprecated use `ChatCompletionsRequest$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionsRequest$inboundSchema;
  /** @deprecated use `ChatCompletionsRequest$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionsRequest$outboundSchema;
  /** @deprecated use `ChatCompletionsRequest$Outbound` instead. */
  export type Outbound = ChatCompletionsRequest$Outbound;
}

export function chatCompletionsRequestToJSON(
  chatCompletionsRequest: ChatCompletionsRequest,
): string {
  return JSON.stringify(
    ChatCompletionsRequest$outboundSchema.parse(chatCompletionsRequest),
  );
}

export function chatCompletionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionsRequest' from JSON`,
  );
}
