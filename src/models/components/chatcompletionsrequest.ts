/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FunctionT,
  FunctionT$inboundSchema,
  FunctionT$Outbound,
  FunctionT$outboundSchema,
} from "./function.js";
import {
  ImageMessage,
  ImageMessage$inboundSchema,
  ImageMessage$Outbound,
  ImageMessage$outboundSchema,
} from "./imagemessage.js";
import {
  ResponseFormat,
  ResponseFormat$inboundSchema,
  ResponseFormat$Outbound,
  ResponseFormat$outboundSchema,
} from "./responseformat.js";
import {
  TextMessage,
  TextMessage$inboundSchema,
  TextMessage$Outbound,
  TextMessage$outboundSchema,
} from "./textmessage.js";
import {
  Tool,
  Tool$inboundSchema,
  Tool$Outbound,
  Tool$outboundSchema,
} from "./tool.js";
import {
  ToolChoice,
  ToolChoice$inboundSchema,
  ToolChoice$Outbound,
  ToolChoice$outboundSchema,
} from "./toolchoice.js";

export type Messages = TextMessage | ImageMessage;

export type ChatCompletionsRequestToolChoice = ToolChoice | string;

export type ChatCompletionsRequest = {
  model: string;
  messages: Array<TextMessage | ImageMessage>;
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  stream?: boolean | undefined;
  n?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  responseFormat?: ResponseFormat | undefined;
  functions?: Array<FunctionT> | undefined;
  tools?: Array<Tool> | undefined;
  toolChoice?: ToolChoice | string | undefined;
  webSearch?: boolean | undefined;
};

/** @internal */
export const Messages$inboundSchema: z.ZodType<
  Messages,
  z.ZodTypeDef,
  unknown
> = z.union([TextMessage$inboundSchema, ImageMessage$inboundSchema]);

/** @internal */
export type Messages$Outbound = TextMessage$Outbound | ImageMessage$Outbound;

/** @internal */
export const Messages$outboundSchema: z.ZodType<
  Messages$Outbound,
  z.ZodTypeDef,
  Messages
> = z.union([TextMessage$outboundSchema, ImageMessage$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Messages$ {
  /** @deprecated use `Messages$inboundSchema` instead. */
  export const inboundSchema = Messages$inboundSchema;
  /** @deprecated use `Messages$outboundSchema` instead. */
  export const outboundSchema = Messages$outboundSchema;
  /** @deprecated use `Messages$Outbound` instead. */
  export type Outbound = Messages$Outbound;
}

export function messagesToJSON(messages: Messages): string {
  return JSON.stringify(Messages$outboundSchema.parse(messages));
}

export function messagesFromJSON(
  jsonString: string,
): SafeParseResult<Messages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Messages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Messages' from JSON`,
  );
}

/** @internal */
export const ChatCompletionsRequestToolChoice$inboundSchema: z.ZodType<
  ChatCompletionsRequestToolChoice,
  z.ZodTypeDef,
  unknown
> = z.union([ToolChoice$inboundSchema, z.string()]);

/** @internal */
export type ChatCompletionsRequestToolChoice$Outbound =
  | ToolChoice$Outbound
  | string;

/** @internal */
export const ChatCompletionsRequestToolChoice$outboundSchema: z.ZodType<
  ChatCompletionsRequestToolChoice$Outbound,
  z.ZodTypeDef,
  ChatCompletionsRequestToolChoice
> = z.union([ToolChoice$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionsRequestToolChoice$ {
  /** @deprecated use `ChatCompletionsRequestToolChoice$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionsRequestToolChoice$inboundSchema;
  /** @deprecated use `ChatCompletionsRequestToolChoice$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionsRequestToolChoice$outboundSchema;
  /** @deprecated use `ChatCompletionsRequestToolChoice$Outbound` instead. */
  export type Outbound = ChatCompletionsRequestToolChoice$Outbound;
}

export function chatCompletionsRequestToolChoiceToJSON(
  chatCompletionsRequestToolChoice: ChatCompletionsRequestToolChoice,
): string {
  return JSON.stringify(
    ChatCompletionsRequestToolChoice$outboundSchema.parse(
      chatCompletionsRequestToolChoice,
    ),
  );
}

export function chatCompletionsRequestToolChoiceFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionsRequestToolChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionsRequestToolChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionsRequestToolChoice' from JSON`,
  );
}

/** @internal */
export const ChatCompletionsRequest$inboundSchema: z.ZodType<
  ChatCompletionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
  messages: z.array(
    z.union([TextMessage$inboundSchema, ImageMessage$inboundSchema]),
  ),
  temperature: z.number().default(0.7),
  max_tokens: z.number().int().default(1000),
  stream: z.boolean().default(false),
  n: z.number().int().default(1),
  top_p: z.number().default(1),
  frequency_penalty: z.number().default(0),
  presence_penalty: z.number().default(0),
  response_format: ResponseFormat$inboundSchema.optional(),
  functions: z.array(FunctionT$inboundSchema).optional(),
  tools: z.array(Tool$inboundSchema).optional(),
  tool_choice: z.union([ToolChoice$inboundSchema, z.string()]).optional(),
  web_search: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "max_tokens": "maxTokens",
    "top_p": "topP",
    "frequency_penalty": "frequencyPenalty",
    "presence_penalty": "presencePenalty",
    "response_format": "responseFormat",
    "tool_choice": "toolChoice",
    "web_search": "webSearch",
  });
});

/** @internal */
export type ChatCompletionsRequest$Outbound = {
  model: string;
  messages: Array<TextMessage$Outbound | ImageMessage$Outbound>;
  temperature: number;
  max_tokens: number;
  stream: boolean;
  n: number;
  top_p: number;
  frequency_penalty: number;
  presence_penalty: number;
  response_format?: ResponseFormat$Outbound | undefined;
  functions?: Array<FunctionT$Outbound> | undefined;
  tools?: Array<Tool$Outbound> | undefined;
  tool_choice?: ToolChoice$Outbound | string | undefined;
  web_search: boolean;
};

/** @internal */
export const ChatCompletionsRequest$outboundSchema: z.ZodType<
  ChatCompletionsRequest$Outbound,
  z.ZodTypeDef,
  ChatCompletionsRequest
> = z.object({
  model: z.string(),
  messages: z.array(
    z.union([TextMessage$outboundSchema, ImageMessage$outboundSchema]),
  ),
  temperature: z.number().default(0.7),
  maxTokens: z.number().int().default(1000),
  stream: z.boolean().default(false),
  n: z.number().int().default(1),
  topP: z.number().default(1),
  frequencyPenalty: z.number().default(0),
  presencePenalty: z.number().default(0),
  responseFormat: ResponseFormat$outboundSchema.optional(),
  functions: z.array(FunctionT$outboundSchema).optional(),
  tools: z.array(Tool$outboundSchema).optional(),
  toolChoice: z.union([ToolChoice$outboundSchema, z.string()]).optional(),
  webSearch: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    maxTokens: "max_tokens",
    topP: "top_p",
    frequencyPenalty: "frequency_penalty",
    presencePenalty: "presence_penalty",
    responseFormat: "response_format",
    toolChoice: "tool_choice",
    webSearch: "web_search",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionsRequest$ {
  /** @deprecated use `ChatCompletionsRequest$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionsRequest$inboundSchema;
  /** @deprecated use `ChatCompletionsRequest$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionsRequest$outboundSchema;
  /** @deprecated use `ChatCompletionsRequest$Outbound` instead. */
  export type Outbound = ChatCompletionsRequest$Outbound;
}

export function chatCompletionsRequestToJSON(
  chatCompletionsRequest: ChatCompletionsRequest,
): string {
  return JSON.stringify(
    ChatCompletionsRequest$outboundSchema.parse(chatCompletionsRequest),
  );
}

export function chatCompletionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionsRequest' from JSON`,
  );
}
