/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChatMessage,
  ChatMessage$inboundSchema,
  ChatMessage$Outbound,
  ChatMessage$outboundSchema,
} from "./chatmessage.js";

export const FinishReason = {
  Stop: "stop",
  Length: "length",
  FunctionCall: "function_call",
  ToolCalls: "tool_calls",
  ContentFilter: "content_filter",
} as const;
export type FinishReason = ClosedEnum<typeof FinishReason>;

export type ChatChoice = {
  index?: number | undefined;
  message?: ChatMessage | undefined;
  finishReason?: FinishReason | undefined;
};

/** @internal */
export const FinishReason$inboundSchema: z.ZodNativeEnum<typeof FinishReason> =
  z.nativeEnum(FinishReason);

/** @internal */
export const FinishReason$outboundSchema: z.ZodNativeEnum<typeof FinishReason> =
  FinishReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FinishReason$ {
  /** @deprecated use `FinishReason$inboundSchema` instead. */
  export const inboundSchema = FinishReason$inboundSchema;
  /** @deprecated use `FinishReason$outboundSchema` instead. */
  export const outboundSchema = FinishReason$outboundSchema;
}

/** @internal */
export const ChatChoice$inboundSchema: z.ZodType<
  ChatChoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number().int().optional(),
  message: ChatMessage$inboundSchema.optional(),
  finish_reason: FinishReason$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type ChatChoice$Outbound = {
  index?: number | undefined;
  message?: ChatMessage$Outbound | undefined;
  finish_reason?: string | undefined;
};

/** @internal */
export const ChatChoice$outboundSchema: z.ZodType<
  ChatChoice$Outbound,
  z.ZodTypeDef,
  ChatChoice
> = z.object({
  index: z.number().int().optional(),
  message: ChatMessage$outboundSchema.optional(),
  finishReason: FinishReason$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatChoice$ {
  /** @deprecated use `ChatChoice$inboundSchema` instead. */
  export const inboundSchema = ChatChoice$inboundSchema;
  /** @deprecated use `ChatChoice$outboundSchema` instead. */
  export const outboundSchema = ChatChoice$outboundSchema;
  /** @deprecated use `ChatChoice$Outbound` instead. */
  export type Outbound = ChatChoice$Outbound;
}

export function chatChoiceToJSON(chatChoice: ChatChoice): string {
  return JSON.stringify(ChatChoice$outboundSchema.parse(chatChoice));
}

export function chatChoiceFromJSON(
  jsonString: string,
): SafeParseResult<ChatChoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatChoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatChoice' from JSON`,
  );
}
