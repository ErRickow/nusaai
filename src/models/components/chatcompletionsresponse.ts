/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChatChoice,
  ChatChoice$inboundSchema,
  ChatChoice$Outbound,
  ChatChoice$outboundSchema,
} from "./chatchoice.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";
import {
  Usage,
  Usage$inboundSchema,
  Usage$Outbound,
  Usage$outboundSchema,
} from "./usage.js";

export type ChatCompletionsResponse = {
  id?: string | undefined;
  object?: string | undefined;
  created?: number | undefined;
  model?: string | undefined;
  choices?: Array<ChatChoice> | undefined;
  usage?: Usage | undefined;
  metadata?: Metadata | undefined;
};

/** @internal */
export const ChatCompletionsResponse$inboundSchema: z.ZodType<
  ChatCompletionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  object: z.string().optional(),
  created: z.number().int().optional(),
  model: z.string().optional(),
  choices: z.array(ChatChoice$inboundSchema).optional(),
  usage: Usage$inboundSchema.optional(),
  _metadata: Metadata$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_metadata": "metadata",
  });
});

/** @internal */
export type ChatCompletionsResponse$Outbound = {
  id?: string | undefined;
  object?: string | undefined;
  created?: number | undefined;
  model?: string | undefined;
  choices?: Array<ChatChoice$Outbound> | undefined;
  usage?: Usage$Outbound | undefined;
  _metadata?: Metadata$Outbound | undefined;
};

/** @internal */
export const ChatCompletionsResponse$outboundSchema: z.ZodType<
  ChatCompletionsResponse$Outbound,
  z.ZodTypeDef,
  ChatCompletionsResponse
> = z.object({
  id: z.string().optional(),
  object: z.string().optional(),
  created: z.number().int().optional(),
  model: z.string().optional(),
  choices: z.array(ChatChoice$outboundSchema).optional(),
  usage: Usage$outboundSchema.optional(),
  metadata: Metadata$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    metadata: "_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionsResponse$ {
  /** @deprecated use `ChatCompletionsResponse$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionsResponse$inboundSchema;
  /** @deprecated use `ChatCompletionsResponse$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionsResponse$outboundSchema;
  /** @deprecated use `ChatCompletionsResponse$Outbound` instead. */
  export type Outbound = ChatCompletionsResponse$Outbound;
}

export function chatCompletionsResponseToJSON(
  chatCompletionsResponse: ChatCompletionsResponse,
): string {
  return JSON.stringify(
    ChatCompletionsResponse$outboundSchema.parse(chatCompletionsResponse),
  );
}

export function chatCompletionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionsResponse' from JSON`,
  );
}
