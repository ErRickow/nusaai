/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";

export type ToolCalls = {};

export type Message = {
  role?: string | undefined;
  content?: string | undefined;
  toolCalls?: Array<ToolCalls> | undefined;
};

export type Choices = {
  index?: number | undefined;
  message?: Message | undefined;
  finishReason?: string | undefined;
};

export type Usage = {
  promptTokens?: number | undefined;
  completionTokens?: number | undefined;
  totalTokens?: number | undefined;
};

/**
 * Response chat completion.
 */
export type ChatCompletionsResponse = {
  id?: string | undefined;
  object?: string | undefined;
  created?: number | undefined;
  model?: string | undefined;
  choices?: Array<Choices> | undefined;
  usage?: Usage | undefined;
  /**
   * Metadata response dari NusantaraAI.
   */
  metadata?: Metadata | undefined;
};

/** @internal */
export const ToolCalls$inboundSchema: z.ZodType<
  ToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ToolCalls$Outbound = {};

/** @internal */
export const ToolCalls$outboundSchema: z.ZodType<
  ToolCalls$Outbound,
  z.ZodTypeDef,
  ToolCalls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolCalls$ {
  /** @deprecated use `ToolCalls$inboundSchema` instead. */
  export const inboundSchema = ToolCalls$inboundSchema;
  /** @deprecated use `ToolCalls$outboundSchema` instead. */
  export const outboundSchema = ToolCalls$outboundSchema;
  /** @deprecated use `ToolCalls$Outbound` instead. */
  export type Outbound = ToolCalls$Outbound;
}

export function toolCallsToJSON(toolCalls: ToolCalls): string {
  return JSON.stringify(ToolCalls$outboundSchema.parse(toolCalls));
}

export function toolCallsFromJSON(
  jsonString: string,
): SafeParseResult<ToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolCalls' from JSON`,
  );
}

/** @internal */
export const Message$inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown> =
  z.object({
    role: z.string().optional(),
    content: z.string().optional(),
    tool_calls: z.array(z.lazy(() => ToolCalls$inboundSchema)).optional(),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type Message$Outbound = {
  role?: string | undefined;
  content?: string | undefined;
  tool_calls?: Array<ToolCalls$Outbound> | undefined;
};

/** @internal */
export const Message$outboundSchema: z.ZodType<
  Message$Outbound,
  z.ZodTypeDef,
  Message
> = z.object({
  role: z.string().optional(),
  content: z.string().optional(),
  toolCalls: z.array(z.lazy(() => ToolCalls$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message$ {
  /** @deprecated use `Message$inboundSchema` instead. */
  export const inboundSchema = Message$inboundSchema;
  /** @deprecated use `Message$outboundSchema` instead. */
  export const outboundSchema = Message$outboundSchema;
  /** @deprecated use `Message$Outbound` instead. */
  export type Outbound = Message$Outbound;
}

export function messageToJSON(message: Message): string {
  return JSON.stringify(Message$outboundSchema.parse(message));
}

export function messageFromJSON(
  jsonString: string,
): SafeParseResult<Message, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Message$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Message' from JSON`,
  );
}

/** @internal */
export const Choices$inboundSchema: z.ZodType<Choices, z.ZodTypeDef, unknown> =
  z.object({
    index: z.number().int().optional(),
    message: z.lazy(() => Message$inboundSchema).optional(),
    finish_reason: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "finish_reason": "finishReason",
    });
  });

/** @internal */
export type Choices$Outbound = {
  index?: number | undefined;
  message?: Message$Outbound | undefined;
  finish_reason?: string | undefined;
};

/** @internal */
export const Choices$outboundSchema: z.ZodType<
  Choices$Outbound,
  z.ZodTypeDef,
  Choices
> = z.object({
  index: z.number().int().optional(),
  message: z.lazy(() => Message$outboundSchema).optional(),
  finishReason: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Choices$ {
  /** @deprecated use `Choices$inboundSchema` instead. */
  export const inboundSchema = Choices$inboundSchema;
  /** @deprecated use `Choices$outboundSchema` instead. */
  export const outboundSchema = Choices$outboundSchema;
  /** @deprecated use `Choices$Outbound` instead. */
  export type Outbound = Choices$Outbound;
}

export function choicesToJSON(choices: Choices): string {
  return JSON.stringify(Choices$outboundSchema.parse(choices));
}

export function choicesFromJSON(
  jsonString: string,
): SafeParseResult<Choices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Choices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Choices' from JSON`,
  );
}

/** @internal */
export const Usage$inboundSchema: z.ZodType<Usage, z.ZodTypeDef, unknown> = z
  .object({
    prompt_tokens: z.number().int().optional(),
    completion_tokens: z.number().int().optional(),
    total_tokens: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "prompt_tokens": "promptTokens",
      "completion_tokens": "completionTokens",
      "total_tokens": "totalTokens",
    });
  });

/** @internal */
export type Usage$Outbound = {
  prompt_tokens?: number | undefined;
  completion_tokens?: number | undefined;
  total_tokens?: number | undefined;
};

/** @internal */
export const Usage$outboundSchema: z.ZodType<
  Usage$Outbound,
  z.ZodTypeDef,
  Usage
> = z.object({
  promptTokens: z.number().int().optional(),
  completionTokens: z.number().int().optional(),
  totalTokens: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Usage$ {
  /** @deprecated use `Usage$inboundSchema` instead. */
  export const inboundSchema = Usage$inboundSchema;
  /** @deprecated use `Usage$outboundSchema` instead. */
  export const outboundSchema = Usage$outboundSchema;
  /** @deprecated use `Usage$Outbound` instead. */
  export type Outbound = Usage$Outbound;
}

export function usageToJSON(usage: Usage): string {
  return JSON.stringify(Usage$outboundSchema.parse(usage));
}

export function usageFromJSON(
  jsonString: string,
): SafeParseResult<Usage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Usage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Usage' from JSON`,
  );
}

/** @internal */
export const ChatCompletionsResponse$inboundSchema: z.ZodType<
  ChatCompletionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  object: z.string().optional(),
  created: z.number().int().optional(),
  model: z.string().optional(),
  choices: z.array(z.lazy(() => Choices$inboundSchema)).optional(),
  usage: z.lazy(() => Usage$inboundSchema).optional(),
  _metadata: Metadata$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_metadata": "metadata",
  });
});

/** @internal */
export type ChatCompletionsResponse$Outbound = {
  id?: string | undefined;
  object?: string | undefined;
  created?: number | undefined;
  model?: string | undefined;
  choices?: Array<Choices$Outbound> | undefined;
  usage?: Usage$Outbound | undefined;
  _metadata?: Metadata$Outbound | undefined;
};

/** @internal */
export const ChatCompletionsResponse$outboundSchema: z.ZodType<
  ChatCompletionsResponse$Outbound,
  z.ZodTypeDef,
  ChatCompletionsResponse
> = z.object({
  id: z.string().optional(),
  object: z.string().optional(),
  created: z.number().int().optional(),
  model: z.string().optional(),
  choices: z.array(z.lazy(() => Choices$outboundSchema)).optional(),
  usage: z.lazy(() => Usage$outboundSchema).optional(),
  metadata: Metadata$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    metadata: "_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionsResponse$ {
  /** @deprecated use `ChatCompletionsResponse$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionsResponse$inboundSchema;
  /** @deprecated use `ChatCompletionsResponse$outboundSchema` instead. */
  export const outboundSchema = ChatCompletionsResponse$outboundSchema;
  /** @deprecated use `ChatCompletionsResponse$Outbound` instead. */
  export type Outbound = ChatCompletionsResponse$Outbound;
}

export function chatCompletionsResponseToJSON(
  chatCompletionsResponse: ChatCompletionsResponse,
): string {
  return JSON.stringify(
    ChatCompletionsResponse$outboundSchema.parse(chatCompletionsResponse),
  );
}

export function chatCompletionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatCompletionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionsResponse' from JSON`,
  );
}
