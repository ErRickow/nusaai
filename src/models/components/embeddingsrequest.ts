/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Input = string | Array<string>;

export const EncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
export type EncodingFormat = ClosedEnum<typeof EncodingFormat>;

export type EmbeddingsRequest = {
  model?: string | undefined;
  input: string | Array<string>;
  encodingFormat?: EncodingFormat | undefined;
};

/** @internal */
export const Input$inboundSchema: z.ZodType<Input, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.array(z.string())]);

/** @internal */
export type Input$Outbound = string | Array<string>;

/** @internal */
export const Input$outboundSchema: z.ZodType<
  Input$Outbound,
  z.ZodTypeDef,
  Input
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Input$ {
  /** @deprecated use `Input$inboundSchema` instead. */
  export const inboundSchema = Input$inboundSchema;
  /** @deprecated use `Input$outboundSchema` instead. */
  export const outboundSchema = Input$outboundSchema;
  /** @deprecated use `Input$Outbound` instead. */
  export type Outbound = Input$Outbound;
}

export function inputToJSON(input: Input): string {
  return JSON.stringify(Input$outboundSchema.parse(input));
}

export function inputFromJSON(
  jsonString: string,
): SafeParseResult<Input, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Input$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Input' from JSON`,
  );
}

/** @internal */
export const EncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof EncodingFormat
> = z.nativeEnum(EncodingFormat);

/** @internal */
export const EncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof EncodingFormat
> = EncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EncodingFormat$ {
  /** @deprecated use `EncodingFormat$inboundSchema` instead. */
  export const inboundSchema = EncodingFormat$inboundSchema;
  /** @deprecated use `EncodingFormat$outboundSchema` instead. */
  export const outboundSchema = EncodingFormat$outboundSchema;
}

/** @internal */
export const EmbeddingsRequest$inboundSchema: z.ZodType<
  EmbeddingsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string().optional(),
  input: z.union([z.string(), z.array(z.string())]),
  encoding_format: EncodingFormat$inboundSchema.default("float"),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type EmbeddingsRequest$Outbound = {
  model?: string | undefined;
  input: string | Array<string>;
  encoding_format: string;
};

/** @internal */
export const EmbeddingsRequest$outboundSchema: z.ZodType<
  EmbeddingsRequest$Outbound,
  z.ZodTypeDef,
  EmbeddingsRequest
> = z.object({
  model: z.string().optional(),
  input: z.union([z.string(), z.array(z.string())]),
  encodingFormat: EncodingFormat$outboundSchema.default("float"),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbeddingsRequest$ {
  /** @deprecated use `EmbeddingsRequest$inboundSchema` instead. */
  export const inboundSchema = EmbeddingsRequest$inboundSchema;
  /** @deprecated use `EmbeddingsRequest$outboundSchema` instead. */
  export const outboundSchema = EmbeddingsRequest$outboundSchema;
  /** @deprecated use `EmbeddingsRequest$Outbound` instead. */
  export type Outbound = EmbeddingsRequest$Outbound;
}

export function embeddingsRequestToJSON(
  embeddingsRequest: EmbeddingsRequest,
): string {
  return JSON.stringify(
    EmbeddingsRequest$outboundSchema.parse(embeddingsRequest),
  );
}

export function embeddingsRequestFromJSON(
  jsonString: string,
): SafeParseResult<EmbeddingsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmbeddingsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmbeddingsRequest' from JSON`,
  );
}
